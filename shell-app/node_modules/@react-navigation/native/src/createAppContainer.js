module.exports = function(g, r, i, a, m, e, d) {
  var t = r(d[0]);
  Object.defineProperty(e, "__esModule", {
      value: !0
  }), e._TESTING_ONLY_reset_container_count = function() {
      0
  }, e.default = function(t) {
      var h = (function(h) {
          function P(n) {
              var o;
              return (0, u.default)(this, P), (o = (0, l.default)(this, (0, c.default)(P).call(this, n))).subs = null, o._actionEventSubscribers = new Set, o._handleOpenURL = function(n) {
                  var s = n.url,
                      u = o.props,
                      l = u.enableURLHandling,
                      c = u.uriPrefix;
                  if (!1 !== l) {
                      var p = y(s, c);
                      if (p) {
                          var v = p.path,
                              h = p.params,
                              f = t.router.getActionForPathAndParams(v, h);
                          f && o.dispatch(f)
                      }
                  }
              }, o._persistNavigationState = function(t) {
                  var n;
                  return s.default.async(function(u) {
                      for (;;) switch (u.prev = u.next) {
                          case 0:
                              if (!(n = o.props.persistNavigationState)) {
                                  u.next = 10;
                                  break
                              }
                              return u.prev = 2, u.next = 5, s.default.awrap(n(t));
                          case 5:
                              u.next = 10;
                              break;
                          case 7:
                              u.prev = 7, u.t0 = u.catch(2), console.warn('Uncaught exception while calling persistNavigationState()! You should handle exceptions thrown from persistNavigationState(), ignoring them may result in undefined behavior.');
                          case 10:
                          case "end":
                              return u.stop()
                      }
                  }, null, null, [
                      [2, 7]
                  ])
              }, o.dispatch = function(n) {
                  if (o.props.navigation) return o.props.navigation.dispatch(n);
                  o._navState = o._navState || o.state.nav;
                  var s = o._navState;
                  (0, N.default)(s, 'should be set in constructor if stateful');
                  var u = t.router.getStateForAction(n, s),
                      l = null === u ? s : u,
                      c = function() {
                          o._actionEventSubscribers.forEach(function(t) {
                              return t({
                                  type: 'action',
                                  action: n,
                                  state: l,
                                  lastState: s
                              })
                          })
                      };
                  return null === u ? (c(), !0) : l !== s ? (o._navState = l, o.setState({
                      nav: l
                  }, function() {
                      o._onNavigationStateChange(s, l, n), c(), o._persistNavigationState(l)
                  }), !0) : (c(), !1)
              }, o._getScreenProps = function() {
                  return o.props.screenProps
              }, o._getTheme = function() {
                  return 'light' === o.props.theme || 'dark' === o.props.theme ? o.props.theme : 'no-preference' === o.props.theme ? 'light' : (console.warn("Invalid theme provided: " + o.props.theme + ". Only 'light' and 'dark' are supported. Falling back to 'light'"), 'light')
              }, w(n), o._initialAction = S.NavigationActions.init(), o._isStateful() && _.BackHandler && 'function' == typeof _.BackHandler.addEventListener && (o.subs = _.BackHandler.addEventListener('hardwareBackPress', function() {
                  if (o._isMounted) return o.dispatch(S.NavigationActions.back());
                  o.subs && o.subs.remove()
              })), o.state = {
                  nav: o._isStateful() && !n.loadNavigationState ? t.router.getStateForAction(o._initialAction) : null
              }, o
          }
          return (0, v.default)(P, h), (0, p.default)(P, null, [{
              key: "getDerivedStateFromProps",
              value: function(t) {
                  return w(t), null
              }
          }]), (0, p.default)(P, [{
              key: "_renderLoading",
              value: function() {
                  return this.props.renderLoadingExperimental ? this.props.renderLoadingExperimental() : null
              }
          }, {
              key: "_isStateful",
              value: function() {
                  return k(this.props)
              }
          }, {
              key: "_onNavigationStateChange",
              value: function(t, n, o) {
                  void 0 === this.props.onNavigationStateChange && this._isStateful() && process.env.REACT_NAV_LOGGING ? console.group ? (console.group('Navigation Dispatch: '), console.log('Action: ', o), console.log('New State: ', n), console.log('Last State: ', t), console.groupEnd()) : console.log('Navigation Dispatch: ', {
                      action: o,
                      newState: n,
                      lastState: t
                  }) : 'function' == typeof this.props.onNavigationStateChange && this.props.onNavigationStateChange(t, n, o)
              }
          }, {
              key: "componentDidUpdate",
              value: function() {
                  this._navState === this.state.nav && (this._navState = null)
              }
          }, {
              key: "componentDidMount",
              value: function() {
                  var n, o, u, l, c, p, v, h, f, S, N = this;
                  return s.default.async(function(b) {
                      for (;;) switch (b.prev = b.next) {
                          case 0:
                              if (this._isMounted = !0, this._isStateful()) {
                                  b.next = 3;
                                  break
                              }
                              return b.abrupt("return");
                          case 3:
                              if (0, _.Linking.addEventListener('url', this._handleOpenURL), n = null, o = null, !1 === this.props.enableURLHandling) {
                                  b.next = 14;
                                  break
                              }
                              return b.next = 11, s.default.awrap(this.getStartupParams());
                          case 11:
                              u = b.sent, n = u.parsedUrl, o = u.userProvidedStartupState;
                          case 14:
                              if (l = this._initialAction, (c = this.state.nav) || o || (process.env.REACT_NAV_LOGGING && console.log('Init new Navigation State'), c = t.router.getStateForAction(l)), o && (c = o, A = !0), n && (v = (p = n).path, h = p.params, (f = t.router.getActionForPathAndParams(v, h)) && (process.env.REACT_NAV_LOGGING && console.log('Applying Navigation Action for Initial URL:', n), l = f, c = t.router.getStateForAction(f, c))), S = function() {
                                      return N._actionEventSubscribers.forEach(function(t) {
                                          return t({
                                              type: 'action',
                                              action: l,
                                              state: N.state.nav,
                                              lastState: null
                                          })
                                      })
                                  }, c !== this.state.nav) {
                                  b.next = 23;
                                  break
                              }
                              return S(), b.abrupt("return");
                          case 23:
                              this.setState({
                                  nav: c
                              }, function() {
                                  A = !1, S()
                              });
                          case 24:
                          case "end":
                              return b.stop()
                      }
                  }, null, this)
              }
          }, {
              key: "getStartupParams",
              value: function() {
                  var t, n, u, l, c, p, v;
                  return s.default.async(function(h) {
                      for (;;) switch (h.prev = h.next) {
                          case 0:
                              return t = this.props, n = t.uriPrefix, u = t.loadNavigationState, h.prev = 1, h.next = 4, s.default.awrap(Promise.all([_.Linking.getInitialURL(), u && u()]));
                          case 4:
                              p = h.sent, v = (0, o.default)(p, 2), l = v[0], c = v[1], h.next = 12;
                              break;
                          case 10:
                              h.prev = 10, h.t0 = h.catch(1);
                          case 12:
                              return h.abrupt("return", {
                                  parsedUrl: l && y(l, n),
                                  userProvidedStartupState: c
                              });
                          case 13:
                          case "end":
                              return h.stop()
                      }
                  }, null, this, [
                      [1, 10]
                  ])
              }
          }, {
              key: "componentDidCatch",
              value: function(t) {
                  if (!A) throw t;
                  A = !1, console.warn('Uncaught exception while starting app from persisted navigation state! Trying to render again with a fresh navigation state...'), this.dispatch(S.NavigationActions.init())
              }
          }, {
              key: "componentWillUnmount",
              value: function() {
                  this._isMounted = !1, _.Linking.removeEventListener('url', this._handleOpenURL), this.subs && this.subs.remove(), this._isStateful() && 0
              }
          }, {
              key: "render",
              value: function() {
                  var o = this,
                      s = this.props.navigation;
                  if (this._isStateful()) {
                      var u = this.state.nav;
                      if (!u) return this._renderLoading();
                      this._navigation && this._navigation.state === u || (this._navigation = (0, S.getNavigation)(t.router, u, this.dispatch, this._actionEventSubscribers, this._getScreenProps, function() {
                          return o._navigation
                      })), s = this._navigation
                  }
                  return (0, N.default)(s, 'failed to get navigation'), f.default.createElement(S.ThemeProvider, {
                      value: this._getTheme(),
                      __source: {
                          fileName: b,
                          lineNumber: 428
                      }
                  }, f.default.createElement(S.NavigationProvider, {
                      value: s,
                      __source: {
                          fileName: b,
                          lineNumber: 429
                      }
                  }, f.default.createElement(t, (0, n.default)({}, this.props, {
                      navigation: s,
                      __source: {
                          fileName: b,
                          lineNumber: 430
                      }
                  }))))
              }
          }]), P
      })(f.default.Component);
      return h.router = t.router, h.navigationOptions = null, h.defaultProps = {
          theme: 'light'
      }, h
  };
  var n = t(r(d[1])),
      o = t(r(d[2])),
      s = t(r(d[3])),
      u = t(r(d[4])),
      l = t(r(d[5])),
      c = t(r(d[6])),
      p = t(r(d[7])),
      v = t(r(d[8])),
      h = t(r(d[9])),
      f = t(r(d[10])),
      _ = r(d[11]),
      S = r(d[12]),
      N = t(r(d[13])),
      b = (t(r(d[14])), "/Users/linyiting/Desktop/Arrow/arrow/node_modules/@react-navigation/native/src/createAppContainer.js"),
      y = S.pathUtils.urlToPathAndParams;

  function k(t) {
      return !t.navigation
  }

  function w(t) {
      if (t.persistenceKey && console.warn("You passed persistenceKey prop to a navigator. The persistenceKey prop was replaced by a more flexible persistence mechanism, please see the navigation state persistence docs for more information. Passing the persistenceKey prop is a no-op."), !k(t)) {
          t.navigation, t.screenProps;
          var n = t.persistNavigationState,
              o = t.loadNavigationState,
              s = (t.theme, (0, h.default)(t, ["navigation", "screenProps", "persistNavigationState", "loadNavigationState", "theme"])),
              u = Object.keys(s);
          if (0 !== u.length) throw new Error("This navigator has both navigation and container props, so it is unclear if it should own its own state. Remove props: \"" + u.join(', ') + "\" if the navigator should get its state from the navigation prop. If the navigator should maintain its own state, do not pass a navigation prop.");
          (0, N.default)(void 0 === n && void 0 === o || 'function' == typeof n && 'function' == typeof o, 'both persistNavigationState and loadNavigationState must either be undefined, or be functions')
      }
  }
  var A = !1
}