module.exports = function(g, r, i, a, m, e, d) {
  var t = r(d[0]);
  Object.defineProperty(e, "__esModule", {
      value: !0
  }), e.default = void 0;
  var n = t(r(d[1])),
      u = t(r(d[2])),
      o = t(r(d[3])),
      s = t(r(d[4])),
      l = t(r(d[5])),
      p = t(r(d[6])),
      c = t(r(d[7])),
      f = r(d[8]);
  e.default = function(t, v) {
      var _, T;
      return T = _ = (function(_) {
          function T() {
              var t, n;
              (0, u.default)(this, T);
              for (var o = arguments.length, p = new Array(o), c = 0; c < o; c++) p[c] = arguments[c];
              return (n = (0, s.default)(this, (t = (0, l.default)(T)).call.apply(t, [this].concat(p))))._previouslyFocusedTextInput = null, n._handleGestureBegin = function() {
                  n._previouslyFocusedTextInput = f.TextInput.State.currentlyFocusedField(), n._previouslyFocusedTextInput && f.TextInput.State.blurTextInput(n._previouslyFocusedTextInput), n.props.onGestureBegin && n.props.onGestureBegin()
              }, n._handleGestureCanceled = function() {
                  n._previouslyFocusedTextInput && f.TextInput.State.focusTextInput(n._previouslyFocusedTextInput), n.props.onGestureCanceled && n.props.onGestureCanceled()
              }, n._handleGestureEnd = function() {
                  n._previouslyFocusedTextInput = null, n.props.onGestureFinish && n.props.onGestureFinish()
              }, n._handleTransitionStart = function(t, u) {
                  if (t.index !== u.index) {
                      var o = f.TextInput.State.currentlyFocusedField();
                      o && f.TextInput.State.blurTextInput(o)
                  }
                  var s = n.props.onTransitionStart || v.onTransitionStart;
                  s && s(t, u)
              }, n
          }
          return (0, p.default)(T, _), (0, o.default)(T, [{
              key: "render",
              value: function() {
                  return c.default.createElement(t, (0, n.default)({}, this.props, {
                      onGestureBegin: this._handleGestureBegin,
                      onGestureCanceled: this._handleGestureCanceled,
                      onGestureEnd: this._handleGestureEnd,
                      onTransitionStart: this._handleTransitionStart,
                      __source: {
                          fileName: "/Users/linyiting/Desktop/Arrow/arrow/node_modules/@react-navigation/native/src/createKeyboardAwareNavigator.js",
                          lineNumber: 12
                      }
                  }))
              }
          }]), T
      })(c.default.Component), _.router = t.router, _.navigationOptions = t.navigationOptions, T
  }
}