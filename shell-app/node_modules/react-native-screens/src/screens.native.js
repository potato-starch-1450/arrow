module.exports = function(g, r, i, a, m, e, d) {
  var t, n, o, l = r(d[0]),
      u = l(r(d[1])),
      s = l(r(d[2])),
      f = l(r(d[3])),
      c = l(r(d[4])),
      p = l(r(d[5])),
      v = l(r(d[6])),
      N = l(r(d[7])),
      h = l(r(d[8])),
      S = r(d[9]),
      C = r(d[10]),
      _ = "/Users/linyiting/Desktop/Arrow/arrow/node_modules/react-native-screens/src/screens.native.js",
      y = !1,
      R = function(t) {
          return void 0 !== S.UIManager.getViewManagerConfig ? S.UIManager.getViewManagerConfig(t) : S.UIManager[t]
      };
  var b = {
          get NativeScreen() {
              return t = t || (0, S.requireNativeComponent)('RNSScreen', null)
          },
          get NativeScreenContainer() {
              return n = n || (0, S.requireNativeComponent)('RNSScreenContainer', null)
          }
      },
      E = (function(t) {
          function n() {
              var t, o;
              (0, f.default)(this, n);
              for (var l = arguments.length, u = new Array(l), s = 0; s < l; s++) u[s] = arguments[s];
              return (o = (0, p.default)(this, (t = (0, v.default)(n)).call.apply(t, [this].concat(u)))).setRef = function(t) {
                  o._ref = t, o.props.onComponentRef && o.props.onComponentRef(t)
              }, o
          }
          return (0, N.default)(n, t), (0, c.default)(n, [{
              key: "setNativeProps",
              value: function(t) {
                  this._ref.setNativeProps(t)
              }
          }, {
              key: "render",
              value: function() {
                  if (y) {
                      if (o = o || S.Animated.createAnimatedComponent(b.NativeScreen), C.version.minor >= 57) return h.default.createElement(o, (0, u.default)({}, this.props, {
                          ref: this.setRef,
                          __source: {
                              fileName: _,
                              lineNumber: 78
                          }
                      }));
                      var t = this.props,
                          n = t.style,
                          l = t.children,
                          f = (0, s.default)(t, ["style", "children"]);
                      return h.default.createElement(o, (0, u.default)({}, f, {
                          ref: this.setRef,
                          style: S.StyleSheet.absoluteFill,
                          __source: {
                              fileName: _,
                              lineNumber: 86
                          }
                      }), h.default.createElement(S.Animated.View, {
                          style: n,
                          __source: {
                              fileName: _,
                              lineNumber: 90
                          }
                      }, l))
                  }
                  var c = this.props,
                      p = (c.active, c.onComponentRef, (0, s.default)(c, ["active", "onComponentRef"]));
                  return h.default.createElement(S.Animated.View, (0, u.default)({}, p, {
                      ref: this.setRef,
                      __source: {
                          fileName: _,
                          lineNumber: 71
                      }
                  }))
              }
          }]), n
      })(h.default.Component),
      w = (function(t) {
          function n() {
              return (0, f.default)(this, n), (0, p.default)(this, (0, v.default)(n).apply(this, arguments))
          }
          return (0, N.default)(n, t), (0, c.default)(n, [{
              key: "render",
              value: function() {
                  return y ? h.default.createElement(b.NativeScreenContainer, (0, u.default)({}, this.props, {
                      __source: {
                          fileName: _,
                          lineNumber: 103
                      }
                  })) : h.default.createElement(S.View, (0, u.default)({}, this.props, {
                      __source: {
                          fileName: _,
                          lineNumber: 101
                      }
                  }))
              }
          }]), n
      })(h.default.Component);
  m.exports = {
      ScreenContainer: w,
      Screen: E,
      get NativeScreen() {
          return b.NativeScreen
      },
      get NativeScreenContainer() {
          return b.NativeScreenContainer
      },
      useScreens: function() {
          var t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
          (y = t) && !R('RNSScreen') && console.error("Screen native module hasn't been linked. Please check the react-native-screens README for more details")
      },
      screensEnabled: function() {
          return y
      }
  }
}