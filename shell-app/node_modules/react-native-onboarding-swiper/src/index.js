module.exports = function(g, r, i, a, m, e, d) {
  var t = r(d[0]),
      o = r(d[1]);
  Object.defineProperty(e, "__esModule", {
      value: !0
  }), e.default = void 0;
  var n = t(r(d[2])),
      l = t(r(d[3])),
      u = t(r(d[4])),
      s = t(r(d[5])),
      f = t(r(d[6])),
      p = t(r(d[7])),
      c = r(d[8]),
      h = t(r(d[9])),
      b = o(r(d[10])),
      w = t(r(d[11])),
      y = t(r(d[12])),
      S = t(r(d[13])),
      C = t(r(d[14])),
      k = t(r(d[15])),
      x = t(r(d[16])),
      B = t(r(d[17])),
      T = "/Users/linyiting/Desktop/Arrow/arrow/node_modules/react-native-onboarding-swiper/src/index.js",
      v = {
          itemVisiblePercentThreshold: 100
      },
      P = (function(t) {
          function o() {
              var t;
              return (0, l.default)(this, o), (t = (0, s.default)(this, (0, f.default)(o).call(this))).onSwipePageChange = function(o) {
                  var n = o.viewableItems;
                  n[0] && t.state.currentPage !== n[0].index && t.setState(function(o) {
                      return t.props.pageIndexCallback && t.props.pageIndexCallback(n[0].index), {
                          previousPage: o.currentPage,
                          currentPage: n[0].index,
                          backgroundColorAnim: new c.Animated.Value(0)
                      }
                  })
              }, t.goNext = function() {
                  t.flatList.scrollToIndex({
                      animated: !0,
                      index: t.state.currentPage + 1
                  })
              }, t._onLayout = function() {
                  var o = c.Dimensions.get('window'),
                      n = o.width,
                      l = o.height;
                  t.setState({
                      width: n,
                      height: l
                  })
              }, t.keyExtractor = function(t, o) {
                  return o.toString()
              }, t.renderItem = function(o) {
                  var l = o.item,
                      u = l.image,
                      s = l.title,
                      f = l.subtitle,
                      p = l.backgroundColor,
                      h = (0, w.default)(p).getBrightness() > 180,
                      S = t.props,
                      C = S.containerStyles,
                      k = S.imageContainerStyles,
                      x = S.allowFontScalingText,
                      B = S.titleStyles,
                      v = S.subTitleStyles;
                  return b.default.createElement(y.default, {
                      isLight: h,
                      image: u,
                      title: s,
                      subtitle: f,
                      width: t.state.width || c.Dimensions.get('window').width,
                      height: t.state.height || c.Dimensions.get('window').height,
                      containerStyles: C,
                      imageContainerStyles: k,
                      allowFontScaling: x,
                      titleStyles: (0, n.default)({}, B || {}, l.titleStyles || {}),
                      subTitleStyles: (0, n.default)({}, v || {}, l.subTitleStyles || {}),
                      __source: {
                          fileName: T,
                          lineNumber: 86
                      }
                  })
              }, t.state = {
                  currentPage: 0,
                  previousPage: null,
                  width: null,
                  height: null,
                  backgroundColorAnim: new c.Animated.Value(0)
              }, t
          }
          return (0, p.default)(o, t), (0, u.default)(o, [{
              key: "componentDidUpdate",
              value: function() {
                  c.Animated.timing(this.state.backgroundColorAnim, {
                      toValue: 1,
                      duration: this.props.transitionAnimationDuration
                  }).start()
              }
          }, {
              key: "render",
              value: function() {
                  var t = this,
                      o = this.props,
                      l = o.pages,
                      u = o.alterBottomColor,
                      s = o.bottomBarHeight,
                      f = o.bottomBarColor,
                      p = o.controlStatusBar,
                      h = o.showSkip,
                      y = o.showNext,
                      C = o.showDone,
                      k = o.showPagination,
                      x = o.onSkip,
                      B = o.onDone,
                      P = o.skipLabel,
                      N = o.nextLabel,
                      _ = o.allowFontScalingButtons,
                      L = o.SkipButtonComponent,
                      A = o.DoneButtonComponent,
                      I = o.NextButtonComponent,
                      E = o.DotComponent,
                      O = o.flatlistProps,
                      F = o.skipToPage,
                      H = l[this.state.currentPage].backgroundColor,
                      V = (0, w.default)(H).getBrightness() > 180,
                      R = V ? 'dark-content' : 'light-content',
                      q = void 0 !== u ? u : this.props.bottomBarHighlight,
                      j = H;
                  if (null !== this.state.previousPage && void 0 !== l[this.state.previousPage]) {
                      var U = l[this.state.previousPage].backgroundColor;
                      j = this.state.backgroundColorAnim.interpolate({
                          inputRange: [0, 1],
                          outputRange: [U, H]
                      })
                  }
                  void 0 !== u && console.warn('The prop alterBottomColor on react-native-onboarding-swiper is deprecated and will be removed soon. Use `bottomBarHighlight` instead.');
                  var z = null != F ? function() {
                      t.flatList.scrollToIndex({
                          animated: !0,
                          index: F
                      })
                  } : x;
                  return b.default.createElement(c.Animated.View, {
                      onLayout: this._onLayout,
                      style: {
                          flex: 1,
                          backgroundColor: j,
                          justifyContent: 'center'
                      },
                      __source: {
                          fileName: T,
                          lineNumber: 172
                      }
                  }, p && b.default.createElement(c.StatusBar, {
                      barStyle: R,
                      __source: {
                          fileName: T,
                          lineNumber: 176
                      }
                  }), b.default.createElement(c.FlatList, (0, n.default)({
                      ref: function(o) {
                          t.flatList = o
                      },
                      data: l,
                      pagingEnabled: !0,
                      horizontal: !0,
                      showsHorizontalScrollIndicator: !1,
                      renderItem: this.renderItem,
                      keyExtractor: this.keyExtractor,
                      onViewableItemsChanged: this.onSwipePageChange,
                      viewabilityConfig: v,
                      initialNumToRender: 1,
                      extraData: this.state.width
                  }, O, {
                      __source: {
                          fileName: T,
                          lineNumber: 177
                      }
                  })), k && b.default.createElement(c.SafeAreaView, {
                      style: q ? D.overlay : {},
                      __source: {
                          fileName: T,
                          lineNumber: 196
                      }
                  }, b.default.createElement(S.default, {
                      isLight: V,
                      bottomBarHeight: s,
                      bottomBarColor: f,
                      showSkip: h,
                      showNext: y,
                      showDone: C,
                      numPages: l.length,
                      currentPage: this.state.currentPage,
                      controlStatusBar: p,
                      onSkip: z,
                      onDone: B,
                      onNext: this.goNext,
                      skipLabel: P,
                      nextLabel: N,
                      allowFontScaling: _,
                      SkipButtonComponent: L,
                      DoneButtonComponent: A,
                      NextButtonComponent: I,
                      DotComponent: E,
                      __source: {
                          fileName: T,
                          lineNumber: 197
                      }
                  })))
              }
          }]), o
      })(b.Component);
  P.propTypes = {
      pages: h.default.arrayOf(h.default.shape({
          backgroundColor: h.default.string.isRequired,
          image: h.default.element.isRequired,
          title: h.default.oneOfType([h.default.string, h.default.element, h.default.func]).isRequired,
          subtitle: h.default.oneOfType([h.default.string, h.default.element]).isRequired
      })).isRequired,
      bottomBarHighlight: h.default.bool,
      bottomBarHeight: h.default.number,
      bottomBarColor: h.default.string,
      controlStatusBar: h.default.bool,
      showSkip: h.default.bool,
      showNext: h.default.bool,
      showDone: h.default.bool,
      showPagination: h.default.bool,
      onSkip: h.default.func,
      onDone: h.default.func,
      skipLabel: h.default.oneOfType([h.default.element, h.default.string]),
      nextLabel: h.default.oneOfType([h.default.element, h.default.string]),
      SkipButtonComponent: h.default.oneOfType([h.default.element, h.default.func]),
      DoneButtonComponent: h.default.oneOfType([h.default.element, h.default.func]),
      NextButtonComponent: h.default.oneOfType([h.default.element, h.default.func]),
      DotComponent: h.default.oneOfType([h.default.element, h.default.func]),
      containerStyles: c.ViewPropTypes.style,
      imageContainerStyles: c.ViewPropTypes.style,
      allowFontScalingText: h.default.bool,
      allowFontScalingButtons: h.default.bool,
      titleStyles: c.Text.propTypes.style,
      subTitleStyles: c.Text.propTypes.style,
      transitionAnimationDuration: h.default.number,
      skipToPage: h.default.number,
      pageIndexCallback: h.default.func
  }, P.defaultProps = {
      bottomBarHighlight: !0,
      bottomBarHeight: 60,
      bottomBarColor: 'transparent',
      controlStatusBar: !0,
      showPagination: !0,
      showSkip: !0,
      showNext: !0,
      showDone: !0,
      skipLabel: 'Skip',
      nextLabel: 'Next',
      onSkip: null,
      onDone: null,
      SkipButtonComponent: k.default,
      DoneButtonComponent: B.default,
      NextButtonComponent: x.default,
      DotComponent: C.default,
      containerStyles: null,
      imageContainerStyles: null,
      allowFontScalingText: !0,
      allowFontScalingButtons: !0,
      titleStyles: null,
      subTitleStyles: null,
      transitionAnimationDuration: 500,
      skipToPage: null,
      pageIndexCallback: null
  };
  var D = {
          overlay: {
              backgroundColor: 'rgba(0, 0, 0, 0.1)'
          }
      },
      N = P;
  e.default = N
}