module.exports = function(g, r, i, a, m, e, d) {
  var t = r(d[0]);
  Object.defineProperty(e, "__esModule", {
      value: !0
  }), e.default = void 0;
  var n = t(r(d[1])),
      o = t(r(d[2])),
      l = t(r(d[3])),
      u = t(r(d[4])),
      c = t(r(d[5])),
      s = t(r(d[6])),
      f = t(r(d[7])),
      p = t(r(d[8])),
      y = t(r(d[9])),
      h = t(r(d[10])),
      C = r(d[11]),
      S = r(d[12]),
      b = r(d[13]),
      T = t(r(d[14])),
      v = t(r(d[15])),
      I = "/Users/linyiting/Desktop/Arrow/arrow/node_modules/react-native-elements/src/searchbar/SearchBar-default.js";

  function w(t, n) {
      var o = Object.keys(t);
      if (Object.getOwnPropertySymbols) {
          var l = Object.getOwnPropertySymbols(t);
          n && (l = l.filter(function(n) {
              return Object.getOwnPropertyDescriptor(t, n).enumerable
          })), o.push.apply(o, l)
      }
      return o
  }

  function P(t) {
      for (var o = 1; o < arguments.length; o++) {
          var l = null != arguments[o] ? arguments[o] : {};
          o % 2 ? w(l, !0).forEach(function(o) {
              (0, n.default)(t, o, l[o])
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(l)) : w(l).forEach(function(n) {
              Object.defineProperty(t, n, Object.getOwnPropertyDescriptor(l, n))
          })
      }
      return t
  }
  var O = function(t) {
          return {
              type: 'material',
              size: 18,
              name: 'search',
              color: t.colors.grey3
          }
      },
      j = function(t) {
          return {
              type: 'material',
              size: 18,
              name: 'clear',
              color: t.colors.grey3
          }
      },
      x = (function(t) {
          function n(t) {
              var o;
              (0, u.default)(this, n), (o = (0, s.default)(this, (0, f.default)(n).call(this, t))).focus = function() {
                  o.input.focus()
              }, o.blur = function() {
                  o.input.blur()
              }, o.clear = function() {
                  o.input.clear(), o.onChangeText(''), o.props.onClear()
              }, o.onFocus = function() {
                  o.props.onFocus(), o.setState({
                      isEmpty: '' === o.props.value
                  })
              }, o.onBlur = function() {
                  o.props.onBlur()
              }, o.onChangeText = function(t) {
                  o.props.onChangeText(t), o.setState({
                      isEmpty: '' === t
                  })
              };
              var l = t.value;
              return o.state = {
                  isEmpty: !l || '' === l
              }, o
          }
          return (0, p.default)(n, t), (0, c.default)(n, [{
              key: "render",
              value: function() {
                  var t = this,
                      n = this.props,
                      u = n.theme,
                      c = (0, l.default)(n, ["theme"]),
                      s = c.lightTheme,
                      f = c.round,
                      p = c.clearIcon,
                      h = void 0 === p ? j(u) : p,
                      S = c.containerStyle,
                      w = c.searchIcon,
                      x = void 0 === w ? O(u) : w,
                      B = c.leftIconContainerStyle,
                      E = c.rightIconContainerStyle,
                      L = c.inputContainerStyle,
                      N = c.inputStyle,
                      k = c.showLoading,
                      D = c.loadingProps,
                      F = c.placeholderTextColor,
                      V = void 0 === F ? u.colors.grey3 : F,
                      R = (0, l.default)(c, ["lightTheme", "round", "clearIcon", "containerStyle", "searchIcon", "leftIconContainerStyle", "rightIconContainerStyle", "inputContainerStyle", "inputStyle", "showLoading", "loadingProps", "placeholderTextColor"]),
                      z = this.state.isEmpty,
                      W = D.style,
                      A = (0, l.default)(D, ["style"]);
                  return y.default.createElement(C.View, {
                      style: C.StyleSheet.flatten([_.container(u), s && _.containerLight(u), S]),
                      __source: {
                          fileName: I,
                          lineNumber: 85
                      }
                  }, y.default.createElement(T.default, (0, o.default)({
                      testID: "searchInput"
                  }, R, {
                      onFocus: this.onFocus,
                      onBlur: this.onBlur,
                      onChangeText: this.onChangeText,
                      ref: function(n) {
                          t.input = n
                      },
                      placeholderTextColor: V,
                      inputStyle: C.StyleSheet.flatten([_.inputStyle(u), N]),
                      inputContainerStyle: C.StyleSheet.flatten([_.inputContentContainer(u), s && _.inputContentContainerLight(u), f && _.round, L]),
                      containerStyle: _.inputContainer,
                      leftIcon: (0, b.renderNode)(v.default, x, O(u)),
                      leftIconContainerStyle: C.StyleSheet.flatten([_.leftIconContainerStyle, B]),
                      rightIcon: y.default.createElement(C.View, {
                          style: {
                              flexDirection: 'row'
                          },
                          __source: {
                              fileName: I,
                              lineNumber: 119
                          }
                      }, k && y.default.createElement(C.ActivityIndicator, (0, o.default)({
                          key: "loading",
                          style: C.StyleSheet.flatten([{
                              marginRight: 5
                          }, W])
                      }, A, {
                          __source: {
                              fileName: I,
                              lineNumber: 121
                          }
                      })), !z && (0, b.renderNode)(v.default, h, P({}, j(u), {
                          key: 'cancel',
                          onPress: this.clear
                      }))),
                      rightIconContainerStyle: C.StyleSheet.flatten([_.rightIconContainerStyle, E]),
                      __source: {
                          fileName: I,
                          lineNumber: 92
                      }
                  })))
              }
          }]), n
      })(y.default.Component);
  x.propTypes = {
      value: h.default.string,
      clearIcon: b.nodeType,
      searchIcon: b.nodeType,
      loadingProps: h.default.object,
      showLoading: h.default.bool,
      containerStyle: S.ViewPropTypes.style,
      leftIconContainerStyle: S.ViewPropTypes.style,
      rightIconContainerStyle: S.ViewPropTypes.style,
      inputContainerStyle: S.ViewPropTypes.style,
      inputStyle: C.Text.propTypes.style,
      onClear: h.default.func,
      onFocus: h.default.func,
      onBlur: h.default.func,
      onChangeText: h.default.func,
      placeholderTextColor: h.default.string,
      lightTheme: h.default.bool,
      round: h.default.bool,
      theme: h.default.object
  }, x.defaultProps = {
      value: '',
      loadingProps: {},
      showLoading: !1,
      lightTheme: !1,
      round: !1,
      onClear: function() {
          return null
      },
      onFocus: function() {
          return null
      },
      onBlur: function() {
          return null
      },
      onChangeText: function() {
          return null
      }
  };
  var _ = {
          container: function(t) {
              return {
                  borderTopWidth: 1,
                  borderBottomWidth: 1,
                  borderBottomColor: '#000',
                  borderTopColor: '#000',
                  padding: 8,
                  backgroundColor: t.colors.grey0
              }
          },
          rightIconContainerStyle: {
              marginRight: 8
          },
          leftIconContainerStyle: {
              marginLeft: 8
          },
          containerLight: function(t) {
              return {
                  borderTopColor: '#e1e1e1',
                  borderBottomColor: '#e1e1e1',
                  backgroundColor: t.colors.grey5
              }
          },
          inputContainer: {
              paddingHorizontal: 0
          },
          inputStyle: function(t) {
              return {
                  color: t.colors.grey3,
                  marginLeft: 10
              }
          },
          inputContentContainer: function(t) {
              return {
                  borderBottomWidth: 0,
                  borderRadius: 3,
                  overflow: 'hidden',
                  minHeight: 30,
                  backgroundColor: t.colors.searchBg
              }
          },
          inputContentContainerLight: function(t) {
              return {
                  backgroundColor: t.colors.grey4
              }
          },
          round: {
              borderRadius: 15
          }
      },
      B = x;
  e.default = B
}