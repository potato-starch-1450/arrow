module.exports = function(g, r, i, a, m, e, d) {
  var t = r(d[0]);
  Object.defineProperty(e, "__esModule", {
      value: !0
  }), e.default = e.PricingCard = void 0;
  var n = t(r(d[1])),
      o = t(r(d[2])),
      l = t(r(d[3])),
      c = t(r(d[4])),
      f = t(r(d[5])),
      u = r(d[6]),
      s = r(d[7]),
      p = r(d[8]),
      y = t(r(d[9])),
      b = t(r(d[10])),
      S = t(r(d[11])),
      h = "/Users/linyiting/Desktop/Arrow/arrow/node_modules/react-native-elements/src/pricing/PricingCard.js";

  function P(t, n) {
      var o = Object.keys(t);
      if (Object.getOwnPropertySymbols) {
          var l = Object.getOwnPropertySymbols(t);
          n && (l = l.filter(function(n) {
              return Object.getOwnPropertyDescriptor(t, n).enumerable
          })), o.push.apply(o, l)
      }
      return o
  }

  function w(t) {
      for (var o = 1; o < arguments.length; o++) {
          var l = null != arguments[o] ? arguments[o] : {};
          o % 2 ? P(l, !0).forEach(function(o) {
              (0, n.default)(t, o, l[o])
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(l)) : P(l).forEach(function(n) {
              Object.defineProperty(t, n, Object.getOwnPropertyDescriptor(l, n))
          })
      }
      return t
  }
  var O = function(t) {
      var n = t.theme,
          f = (0, l.default)(t, ["theme"]),
          s = f.containerStyle,
          p = f.wrapperStyle,
          P = f.title,
          w = f.price,
          O = f.info,
          _ = f.button,
          v = f.color,
          N = void 0 === v ? n.colors.primary : v,
          j = f.titleStyle,
          C = f.pricingStyle,
          E = f.infoStyle,
          x = f.onButtonPress,
          k = (0, l.default)(f, ["containerStyle", "wrapperStyle", "title", "price", "info", "button", "color", "titleStyle", "pricingStyle", "infoStyle", "onButtonPress"]);
      return c.default.createElement(u.View, (0, o.default)({}, k, {
          style: u.StyleSheet.flatten([T.container(n), s && s]),
          __source: {
              fileName: h,
              lineNumber: 31
          }
      }), c.default.createElement(u.View, {
          style: u.StyleSheet.flatten([T.wrapper, p && p]),
          __source: {
              fileName: h,
              lineNumber: 38
          }
      }, c.default.createElement(y.default, {
          testID: "pricingCardTitle",
          style: u.StyleSheet.flatten([T.pricingTitle, j, {
              color: N
          }]),
          __source: {
              fileName: h,
              lineNumber: 44
          }
      }, P), c.default.createElement(y.default, {
          style: u.StyleSheet.flatten([T.pricingPrice, C]),
          __source: {
              fileName: h,
              lineNumber: 55
          }
      }, w), O.map(function(t) {
          return c.default.createElement(y.default, {
              key: t,
              style: u.StyleSheet.flatten([T.pricingInfo(n), E]),
              __source: {
                  fileName: h,
                  lineNumber: 60
              }
          }, t)
      }), c.default.createElement(b.default, {
          title: _.title,
          buttonStyle: u.StyleSheet.flatten([T.button, _.buttonStyle, {
              backgroundColor: N
          }]),
          titleStyle: _.titleStyle,
          onPress: x,
          icon: c.default.createElement(S.default, {
              name: _.icon,
              size: 15,
              color: "white",
              __source: {
                  fileName: h,
                  lineNumber: 77
              }
          }),
          __source: {
              fileName: h,
              lineNumber: 68
          }
      })))
  };
  e.PricingCard = O, O.propTypes = {
      containerStyle: p.ViewPropTypes.style,
      wrapperStyle: p.ViewPropTypes.style,
      title: f.default.string,
      price: f.default.oneOfType([f.default.string, f.default.number]),
      info: f.default.arrayOf(f.default.string),
      button: f.default.object,
      color: f.default.string,
      onButtonPress: f.default.func,
      titleStyle: u.Text.propTypes.style,
      pricingStyle: u.Text.propTypes.style,
      infoStyle: u.Text.propTypes.style,
      theme: f.default.object
  }, O.defaultProps = {
      info: []
  };
  var T = {
          container: function(t) {
              return w({
                  margin: 15,
                  marginBottom: 15,
                  backgroundColor: 'white',
                  borderWidth: 1,
                  padding: 15,
                  borderColor: t.colors.grey5
              }, u.Platform.select({
                  android: {
                      elevation: 1
                  },
                  default: {
                      shadowColor: 'rgba(0,0,0, .2)',
                      shadowOffset: {
                          height: 1,
                          width: 0
                      },
                      shadowOpacity: .5,
                      shadowRadius: .5
                  }
              }))
          },
          wrapper: {
              backgroundColor: 'transparent'
          },
          pricingTitle: w({
              textAlign: 'center',
              fontSize: (0, s.normalizeText)(30)
          }, u.Platform.select({
              android: w({}, p.fonts.android.black),
              default: {
                  fontWeight: '800'
              }
          })),
          pricingPrice: w({
              textAlign: 'center',
              marginTop: 10,
              marginBottom: 10,
              fontSize: (0, s.normalizeText)(40)
          }, u.Platform.select({
              android: w({}, p.fonts.android.bold),
              default: {
                  fontWeight: '700'
              }
          })),
          pricingInfo: function(t) {
              return w({
                  textAlign: 'center',
                  marginTop: 5,
                  marginBottom: 5,
                  color: t.colors.grey3
              }, u.Platform.select({
                  android: w({}, p.fonts.android.bold),
                  default: {
                      fontWeight: '600'
                  }
              }))
          },
          button: {
              marginTop: 15,
              marginBottom: 10
          }
      },
      _ = (0, p.withTheme)(O, 'PricingCard');
  e.default = _
}