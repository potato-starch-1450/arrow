module.exports = function(g, r, i, a, m, e, d) {
  var t = r(d[0]);
  Object.defineProperty(e, "__esModule", {
      value: !0
  }), e.default = e.ButtonGroup = void 0;
  var l = t(r(d[1])),
      o = t(r(d[2])),
      n = t(r(d[3])),
      s = t(r(d[4])),
      u = t(r(d[5])),
      c = t(r(d[6])),
      y = r(d[7]),
      f = r(d[8]),
      b = r(d[9]),
      p = t(r(d[10])),
      S = "/Users/linyiting/Desktop/Arrow/arrow/node_modules/react-native-elements/src/buttons/ButtonGroup.js";

  function T(t, l) {
      var o = Object.keys(t);
      if (Object.getOwnPropertySymbols) {
          var n = Object.getOwnPropertySymbols(t);
          l && (n = n.filter(function(l) {
              return Object.getOwnPropertyDescriptor(t, l).enumerable
          })), o.push.apply(o, n)
      }
      return o
  }

  function h(t) {
      for (var l = 1; l < arguments.length; l++) {
          var o = null != arguments[l] ? arguments[l] : {};
          l % 2 ? T(o, !0).forEach(function(l) {
              (0, n.default)(t, l, o[l])
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(o)) : T(o).forEach(function(l) {
              Object.defineProperty(t, l, Object.getOwnPropertyDescriptor(o, l))
          })
      }
      return t
  }
  var x = function(t) {
      var n = t.theme,
          c = (0, s.default)(t, ["theme"]),
          f = c.Component,
          b = c.buttons,
          T = c.onPress,
          x = c.selectedIndex,
          w = c.selectedIndexes,
          P = c.selectMultiple,
          v = c.containerStyle,
          B = c.innerBorderStyle,
          C = c.lastBorderStyle,
          _ = c.buttonStyle,
          j = c.textStyle,
          R = c.selectedTextStyle,
          I = c.selectedButtonStyle,
          N = c.underlayColor,
          k = void 0 === N ? n.colors.primary : N,
          U = c.activeOpacity,
          V = c.onHideUnderlay,
          D = c.onShowUnderlay,
          E = c.setOpacityTo,
          G = c.containerBorderRadius,
          L = c.disabled,
          M = c.disabledStyle,
          H = c.disabledTextStyle,
          W = c.disabledSelectedStyle,
          A = c.disabledSelectedTextStyle,
          z = (0, s.default)(c, ["Component", "buttons", "onPress", "selectedIndex", "selectedIndexes", "selectMultiple", "containerStyle", "innerBorderStyle", "lastBorderStyle", "buttonStyle", "textStyle", "selectedTextStyle", "selectedButtonStyle", "underlayColor", "activeOpacity", "onHideUnderlay", "onShowUnderlay", "setOpacityTo", "containerBorderRadius", "disabled", "disabledStyle", "disabledTextStyle", "disabledSelectedStyle", "disabledSelectedTextStyle"]),
          F = 1;
      return B && Object.prototype.hasOwnProperty.call(B, 'width') && (F = B.width), u.default.createElement(y.View, (0, l.default)({}, z, {
          style: y.StyleSheet.flatten([O.container, v && v]),
          __source: {
              fileName: S,
              lineNumber: 58
          }
      }), b.map(function(t, l) {
          var s = x === l || w.includes(l),
              c = !0 === L || Array.isArray(L) && L.includes(l);
          return u.default.createElement(y.View, {
              key: l,
              style: y.StyleSheet.flatten([O.button, l < b.length - 1 && {
                  borderRightWidth: 0 === l ? 0 : F,
                  borderRightColor: B && B.color || n.colors.grey4
              }, 1 === l && {
                  borderLeftWidth: F,
                  borderLeftColor: B && B.color || n.colors.grey4
              }, l === b.length - 1 && h({}, C, {
                  borderTopRightRadius: G,
                  borderBottomRightRadius: G
              }), 0 === l && {
                  borderTopLeftRadius: G,
                  borderBottomLeftRadius: G
              }]),
              __source: {
                  fileName: S,
                  lineNumber: 72
              }
          }, u.default.createElement(f, {
              testID: "buttonGroupItem",
              activeOpacity: U,
              setOpacityTo: E,
              onHideUnderlay: V,
              onShowUnderlay: D,
              underlayColor: k,
              disabled: c,
              onPress: function() {
                  P ? w.includes(l) ? T(w.filter(function(t) {
                      return t !== l
                  })) : T([].concat((0, o.default)(w), [l])) : T(l)
              },
              style: O.button,
              __source: {
                  fileName: S,
                  lineNumber: 101
              }
          }, u.default.createElement(y.View, {
              style: y.StyleSheet.flatten([O.textContainer, _ && _, s && {
                  backgroundColor: n.colors.primary
              }, s && I && I, c && O.disabled, c && M, c && s && O.disabledSelected(n), c && s && W]),
              __source: {
                  fileName: S,
                  lineNumber: 122
              }
          }, t.element ? u.default.createElement(t.element, {
              __source: {
                  fileName: S,
                  lineNumber: 137
              }
          }) : u.default.createElement(p.default, {
              testID: "buttonGroupItemText",
              style: y.StyleSheet.flatten([O.buttonText(n), j && j, s && {
                  color: '#fff'
              }, s && R, c && O.disabledText(n), c && H, c && s && A]),
              __source: {
                  fileName: S,
                  lineNumber: 139
              }
          }, t))))
      }))
  };
  e.ButtonGroup = x;
  var O = {
      button: {
          flex: 1
      },
      textContainer: {
          flex: 1,
          justifyContent: 'center',
          alignItems: 'center'
      },
      container: {
          marginLeft: 10,
          marginRight: 10,
          marginBottom: 5,
          marginTop: 5,
          borderColor: '#e3e3e3',
          borderWidth: 1,
          flexDirection: 'row',
          borderRadius: 3,
          overflow: 'hidden',
          backgroundColor: '#fff',
          height: 40
      },
      buttonText: function(t) {
          return h({
              fontSize: (0, b.normalizeText)(13),
              color: t.colors.grey2
          }, y.Platform.select({
              android: {},
              default: {
                  fontWeight: '500'
              }
          }))
      },
      disabled: {
          backgroundColor: 'transparent'
      },
      disabledText: function(t) {
          return {
              color: (0, b.color)(t.colors.disabled).darken(.3).toString()
          }
      },
      disabledSelected: function(t) {
          return {
              backgroundColor: t.colors.disabled
          }
      }
  };
  x.propTypes = {
      button: c.default.object,
      Component: c.default.oneOfType([c.default.func, c.default.object]),
      onPress: c.default.func,
      buttons: c.default.array,
      containerStyle: f.ViewPropTypes.style,
      textStyle: y.Text.propTypes.style,
      selectedTextStyle: y.Text.propTypes.style,
      selectedButtonStyle: f.ViewPropTypes.style,
      underlayColor: c.default.string,
      selectedIndex: c.default.number,
      selectedIndexes: c.default.arrayOf(c.default.number),
      activeOpacity: c.default.number,
      onHideUnderlay: c.default.func,
      onShowUnderlay: c.default.func,
      setOpacityTo: c.default.func,
      innerBorderStyle: c.default.shape({
          color: c.default.string,
          width: c.default.number
      }),
      lastBorderStyle: c.default.oneOfType([f.ViewPropTypes.style, y.Text.propTypes.style]),
      buttonStyle: f.ViewPropTypes.style,
      containerBorderRadius: c.default.number,
      selectMultiple: c.default.bool,
      theme: c.default.object,
      disabled: c.default.oneOfType([c.default.bool, c.default.arrayOf(c.default.number)]),
      disabledStyle: f.ViewPropTypes.style,
      disabledTextStyle: y.Text.propTypes.style,
      disabledSelectedStyle: f.ViewPropTypes.style,
      disabledSelectedTextStyle: y.Text.propTypes.style
  }, x.defaultProps = {
      selectedIndex: null,
      selectedIndexes: [],
      selectMultiple: !1,
      containerBorderRadius: 3,
      disabled: !1,
      Component: y.Platform.select({
          android: y.TouchableNativeFeedback,
          default: y.TouchableOpacity
      }),
      onPress: function() {
          return null
      }
  };
  var w = (0, f.withTheme)(x, 'ButtonGroup');
  e.default = w
}