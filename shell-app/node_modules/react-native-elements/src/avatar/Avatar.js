module.exports = function(g, r, i, a, m, e, d) {
  var t = r(d[0]);
  Object.defineProperty(e, "__esModule", {
      value: !0
  }), e.default = e.Avatar = void 0;
  var o = t(r(d[1])),
      l = t(r(d[2])),
      n = t(r(d[3])),
      s = t(r(d[4])),
      u = t(r(d[5])),
      c = r(d[6]),
      f = r(d[7]),
      y = r(d[8]),
      p = t(r(d[9])),
      h = t(r(d[10])),
      b = "/Users/linyiting/Desktop/Arrow/arrow/node_modules/react-native-elements/src/avatar/Avatar.js";

  function S(t, o) {
      var l = Object.keys(t);
      if (Object.getOwnPropertySymbols) {
          var n = Object.getOwnPropertySymbols(t);
          o && (n = n.filter(function(o) {
              return Object.getOwnPropertyDescriptor(t, o).enumerable
          })), l.push.apply(l, n)
      }
      return l
  }

  function P(t) {
      for (var o = 1; o < arguments.length; o++) {
          var n = null != arguments[o] ? arguments[o] : {};
          o % 2 ? S(n, !0).forEach(function(o) {
              (0, l.default)(t, o, n[o])
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n)) : S(n).forEach(function(o) {
              Object.defineProperty(t, o, Object.getOwnPropertyDescriptor(n, o))
          })
      }
      return t
  }
  var v = {
          small: 34,
          medium: 50,
          large: 75,
          xlarge: 150
      },
      w = {
          name: 'mode-edit',
          type: 'material',
          color: '#fff',
          underlayColor: '#000'
      },
      C = function(t) {
          var l = t.onPress,
              u = t.onLongPress,
              f = t.Component,
              S = void 0 === f ? l || u ? c.TouchableOpacity : c.View : f,
              C = t.containerStyle,
              T = t.icon,
              _ = t.iconStyle,
              E = t.source,
              N = t.size,
              j = t.avatarStyle,
              z = t.rounded,
              B = t.title,
              k = t.titleStyle,
              x = t.overlayContainerStyle,
              I = t.showEditButton,
              V = t.editButton,
              A = t.onEditPress,
              D = t.imageProps,
              L = t.placeholderStyle,
              R = t.renderPlaceholderContent,
              F = t.ImageComponent,
              H = (0, n.default)(t, ["onPress", "onLongPress", "Component", "containerStyle", "icon", "iconStyle", "source", "size", "avatarStyle", "rounded", "title", "titleStyle", "overlayContainerStyle", "showEditButton", "editButton", "onEditPress", "imageProps", "placeholderStyle", "renderPlaceholderContent", "ImageComponent"]),
              M = 'number' == typeof N ? N : v[N] || v.small,
              U = M,
              W = M / 2,
              q = M / 2,
              G = P({}, w, {}, V),
              J = G.size || (M + U) / 2 / 3,
              K = I && s.default.createElement(c.TouchableHighlight, {
                  style: c.StyleSheet.flatten([O.editButton, {
                      width: J,
                      height: J,
                      borderRadius: J / 2
                  }, G.style]),
                  underlayColor: G.underlayColor,
                  onPress: A,
                  __source: {
                      fileName: b,
                      lineNumber: 71
                  }
              }, s.default.createElement(c.View, {
                  __source: {
                      fileName: b,
                      lineNumber: 84
                  }
              }, s.default.createElement(p.default, (0, o.default)({
                  size: .8 * J
              }, G, {
                  __source: {
                      fileName: b,
                      lineNumber: 85
                  }
              })))),
              Q = R && (0, y.renderNode)(void 0, R) || B && s.default.createElement(c.Text, {
                  style: c.StyleSheet.flatten([O.title, {
                      fontSize: W
                  }, k]),
                  __source: {
                      fileName: b,
                      lineNumber: 94
                  }
              }, B) || T && s.default.createElement(p.default, {
                  style: _ && _,
                  color: T.color || 'white',
                  name: T.name || 'user',
                  size: T.size || q,
                  type: T.type && T.type,
                  __source: {
                      fileName: b,
                      lineNumber: 105
                  }
              }),
              X = !E;
          return s.default.createElement(S, (0, o.default)({
              onPress: l,
              onLongPress: u,
              style: c.StyleSheet.flatten([O.container, {
                  height: U,
                  width: M
              }, z && {
                  borderRadius: M / 2
              }, C])
          }, H, {
              __source: {
                  fileName: b,
                  lineNumber: 118
              }
          }), s.default.createElement(h.default, (0, o.default)({
              placeholderStyle: c.StyleSheet.flatten([L, X && {
                  backgroundColor: 'transparent'
              }]),
              PlaceholderContent: Q,
              containerStyle: c.StyleSheet.flatten([O.overlayContainer, x, z && {
                  borderRadius: M / 2,
                  overflow: 'hidden'
              }]),
              source: E
          }, D, {
              style: c.StyleSheet.flatten([O.avatar, D && D.style, j]),
              ImageComponent: F,
              __source: {
                  fileName: b,
                  lineNumber: 129
              }
          })), K)
      };
  e.Avatar = C;
  var O = c.StyleSheet.create({
      container: {
          backgroundColor: 'transparent'
      },
      avatar: {
          flex: 1,
          width: null,
          height: null
      },
      overlayContainer: {
          flex: 1,
          backgroundColor: '#bdbdbd'
      },
      title: {
          color: '#ffffff',
          backgroundColor: 'transparent',
          textAlign: 'center'
      },
      editButton: P({
          position: 'absolute',
          bottom: 0,
          right: 0,
          alignItems: 'center',
          justifyContent: 'center',
          backgroundColor: '#aaa'
      }, c.Platform.select({
          android: {
              elevation: 1
          },
          default: {
              shadowColor: '#000',
              shadowOffset: {
                  width: 1,
                  height: 1
              },
              shadowRadius: 2,
              shadowOpacity: .5
          }
      }))
  });
  C.propTypes = {
      Component: u.default.oneOf([c.View, c.TouchableOpacity, c.TouchableHighlight, c.TouchableNativeFeedback, c.TouchableWithoutFeedback]),
      onPress: u.default.func,
      onLongPress: u.default.func,
      containerStyle: f.ViewPropTypes.style,
      source: c.Image.propTypes.source,
      avatarStyle: f.ViewPropTypes.style,
      rounded: u.default.bool,
      title: u.default.string,
      titleStyle: c.Text.propTypes.style,
      overlayContainerStyle: f.ViewPropTypes.style,
      activeOpacity: u.default.number,
      icon: u.default.object,
      iconStyle: c.Text.propTypes.style,
      size: u.default.oneOfType([u.default.oneOf(['small', 'medium', 'large', 'xlarge']), u.default.number]),
      showEditButton: u.default.bool,
      onEditPress: u.default.func,
      editButton: u.default.shape({
          size: u.default.number,
          name: u.default.string,
          type: u.default.string,
          color: u.default.string,
          underlayColor: u.default.string,
          style: f.ViewPropTypes.style
      }),
      placeholderStyle: f.ViewPropTypes.style,
      renderPlaceholderContent: y.nodeType,
      imageProps: u.default.object,
      ImageComponent: u.default.oneOfType([u.default.func, u.default.object])
  }, C.defaultProps = {
      showEditButton: !1,
      onEditPress: null,
      size: 'small',
      editButton: w,
      ImageComponent: c.Image
  };
  var T = (0, f.withTheme)(C, 'Avatar');
  e.default = T
}