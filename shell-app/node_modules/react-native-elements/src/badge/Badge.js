module.exports = function(g, r, i, a, m, e, d) {
  var t = r(d[0]);
  Object.defineProperty(e, "__esModule", {
      value: !0
  }), e.default = e.Badge = void 0;
  var n = t(r(d[1])),
      l = t(r(d[2])),
      o = t(r(d[3])),
      s = t(r(d[4])),
      u = r(d[5]),
      f = r(d[6]),
      y = r(d[7]),
      c = "/Users/linyiting/Desktop/Arrow/arrow/node_modules/react-native-elements/src/badge/Badge.js",
      p = function(t) {
          var s = t.containerStyle,
              f = t.textStyle,
              p = t.badgeStyle,
              S = t.onPress,
              b = t.Component,
              v = void 0 === b ? S ? u.TouchableOpacity : u.View : b,
              w = t.value,
              _ = t.theme,
              P = t.status,
              T = (0, l.default)(t, ["containerStyle", "textStyle", "badgeStyle", "onPress", "Component", "value", "theme", "status"]),
              x = (0, y.renderNode)(u.Text, w, {
                  style: u.StyleSheet.flatten([h.text, f && f])
              });
          return o.default.createElement(u.View, {
              style: u.StyleSheet.flatten([s && s]),
              __source: {
                  fileName: c,
                  lineNumber: 26
              }
          }, o.default.createElement(v, (0, n.default)({}, T, {
              style: u.StyleSheet.flatten([h.badge(_, P), !x && h.miniBadge, p && p]),
              onPress: S,
              __source: {
                  fileName: c,
                  lineNumber: 27
              }
          }), x))
      };
  e.Badge = p, p.propTypes = {
      containerStyle: f.ViewPropTypes.style,
      badgeStyle: f.ViewPropTypes.style,
      textStyle: u.Text.propTypes.style,
      value: s.default.node,
      onPress: s.default.func,
      Component: s.default.func,
      theme: s.default.object,
      status: s.default.oneOf(['primary', 'success', 'warning', 'error'])
  }, p.defaultProps = {
      status: 'primary'
  };
  var h = {
          badge: function(t, n) {
              return {
                  alignSelf: 'center',
                  minWidth: 18,
                  height: 18,
                  borderRadius: 9,
                  alignItems: 'center',
                  justifyContent: 'center',
                  backgroundColor: t.colors[n],
                  borderWidth: u.StyleSheet.hairlineWidth,
                  borderColor: '#fff'
              }
          },
          miniBadge: {
              paddingHorizontal: 0,
              paddingVertical: 0,
              minWidth: 8,
              height: 8,
              borderRadius: 4
          },
          text: {
              fontSize: 12,
              color: 'white',
              paddingHorizontal: 4
          }
      },
      S = (0, f.withTheme)(p, 'Badge');
  e.default = S
}