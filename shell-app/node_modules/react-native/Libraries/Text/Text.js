module.exports = function(g, r, i, a, m, e, d) {
  'use strict';
  var n = r(d[0]),
      t = r(d[1]),
      o = r(d[2]),
      s = r(d[3]),
      l = r(d[4]),
      u = r(d[5]),
      p = r(d[6]),
      c = r(d[7]),
      f = "/Users/linyiting/Desktop/Arrow/arrow/node_modules/react-native/Libraries/Text/Text.js";

  function h(n, t) {
      var o = Object.keys(n);
      if (Object.getOwnPropertySymbols) {
          var s = Object.getOwnPropertySymbols(n);
          t && (s = s.filter(function(t) {
              return Object.getOwnPropertyDescriptor(n, t).enumerable
          })), o.push.apply(o, s)
      }
      return o
  }

  function R(n) {
      for (var t = 1; t < arguments.length; t++) {
          var o = null != arguments[t] ? arguments[t] : {};
          t % 2 ? h(o, !0).forEach(function(t) {
              c(n, t, o[t])
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(n, Object.getOwnPropertyDescriptors(o)) : h(o).forEach(function(t) {
              Object.defineProperty(n, t, Object.getOwnPropertyDescriptor(o, t))
          })
      }
      return n
  }
  var b = r(d[8]),
      v = r(d[9]),
      H = r(d[10]),
      y = r(d[11]),
      T = r(d[12]),
      P = r(d[13]),
      w = r(d[14]),
      S = r(d[15]),
      O = r(d[16]),
      x = {
          top: 20,
          left: 20,
          right: 20,
          bottom: 30
      },
      _ = {
          validAttributes: R({}, H.UIView, {
              isHighlighted: !0,
              numberOfLines: !0,
              ellipsizeMode: !0,
              allowFontScaling: !0,
              maxFontSizeMultiplier: !0,
              disabled: !0,
              selectable: !0,
              selectionColor: !0,
              adjustsFontSizeToFit: !0,
              minimumFontScale: !0,
              textBreakStrategy: !0,
              onTextLayout: !0
          }),
          directEventTypes: {
              topTextLayout: {
                  registrationName: 'onTextLayout'
              }
          },
          uiViewClassName: 'RCTText'
      },
      C = (function(c) {
          function h() {
              var n, o;
              t(this, h);
              for (var p = arguments.length, c = new Array(p), f = 0; f < p; f++) c[f] = arguments[f];
              return (o = s(this, (n = l(h)).call.apply(n, [this].concat(c)))).state = R({}, T.Mixin.touchableGetInitialState(), {
                  isHighlighted: !1,
                  createResponderHandlers: o._createResponseHandlers.bind(u(o)),
                  responseHandlers: null
              }), o
          }
          return p(h, c), o(h, [{
              key: "render",
              value: function() {
                  var t = this.props;
                  return N(t) && (t = R({}, t, {}, this.state.responseHandlers, {
                      isHighlighted: this.state.isHighlighted
                  })), null != t.selectionColor && (t = R({}, t, {
                      selectionColor: O(t.selectionColor)
                  })), v.createElement(y.Consumer, {
                      __source: {
                          fileName: f,
                          lineNumber: 148
                      }
                  }, function(o) {
                      return o ? v.createElement(j, n({}, t, {
                          ref: t.forwardedRef,
                          __source: {
                              fileName: f,
                              lineNumber: 151
                          }
                      })) : v.createElement(y.Provider, {
                          value: !0,
                          __source: {
                              fileName: f,
                              lineNumber: 153
                          }
                      }, v.createElement(M, n({}, t, {
                          ref: t.forwardedRef,
                          __source: {
                              fileName: f,
                              lineNumber: 154
                          }
                      })))
                  })
              }
          }, {
              key: "_createResponseHandlers",
              value: function() {
                  var n = this;
                  return {
                      onStartShouldSetResponder: function() {
                          var t = n.props.onStartShouldSetResponder,
                              o = null != t && t() || N(n.props);
                          return o && n._attachTouchHandlers(), o
                      },
                      onResponderGrant: function(t, o) {
                          S(n.touchableHandleResponderGrant)(t, o), null != n.props.onResponderGrant && n.props.onResponderGrant.call(n, t, o)
                      },
                      onResponderMove: function(t) {
                          S(n.touchableHandleResponderMove)(t), null != n.props.onResponderMove && n.props.onResponderMove.call(n, t)
                      },
                      onResponderRelease: function(t) {
                          S(n.touchableHandleResponderRelease)(t), null != n.props.onResponderRelease && n.props.onResponderRelease.call(n, t)
                      },
                      onResponderTerminate: function(t) {
                          S(n.touchableHandleResponderTerminate)(t), null != n.props.onResponderTerminate && n.props.onResponderTerminate.call(n, t)
                      },
                      onResponderTerminationRequest: function() {
                          var t = n.props.onResponderTerminationRequest;
                          return !!S(n.touchableHandleResponderTerminationRequest)() && (null == t || t())
                      }
                  }
              }
          }, {
              key: "_attachTouchHandlers",
              value: function() {
                  var n = this;
                  if (null == this.touchableGetPressRectOffset) {
                      for (var t in T.Mixin) 'function' == typeof T.Mixin[t] && (this[t] = T.Mixin[t].bind(this));
                      this.touchableHandleActivePressIn = function() {
                          !n.props.suppressHighlighting && N(n.props) && n.setState({
                              isHighlighted: !0
                          })
                      }, this.touchableHandleActivePressOut = function() {
                          !n.props.suppressHighlighting && N(n.props) && n.setState({
                              isHighlighted: !1
                          })
                      }, this.touchableHandlePress = function(t) {
                          null != n.props.onPress && n.props.onPress(t)
                      }, this.touchableHandleLongPress = function(t) {
                          null != n.props.onLongPress && n.props.onLongPress(t)
                      }, this.touchableGetPressRectOffset = function() {
                          return null == n.props.pressRetentionOffset ? x : n.props.pressRetentionOffset
                      }
                  }
              }
          }], [{
              key: "getDerivedStateFromProps",
              value: function(n, t) {
                  return null == t.responseHandlers && N(n) ? {
                      responseHandlers: t.createResponderHandlers()
                  } : null
              }
          }]), h
      })(v.Component);
  C.defaultProps = {
      accessible: !0,
      allowFontScaling: !0,
      ellipsizeMode: 'tail'
  }, C.viewConfig = _;
  var N = function(n) {
          return null != n.onPress || null != n.onLongPress || null != n.onStartShouldSetResponder
      },
      M = w(_.uiViewClassName, function() {
          return _
      }),
      j = null == P.getViewManagerConfig('RCTVirtualText') ? M : w('RCTVirtualText', function() {
          return {
              validAttributes: R({}, H.UIView, {
                  isHighlighted: !0,
                  maxFontSizeMultiplier: !0
              }),
              uiViewClassName: 'RCTVirtualText'
          }
      }),
      L = v.forwardRef(function(t, o) {
          return v.createElement(C, n({}, t, {
              forwardedRef: o,
              __source: {
                  fileName: f,
                  lineNumber: 278
              }
          }))
      });
  L.displayName = 'Text', L.propTypes = b, m.exports = L
}