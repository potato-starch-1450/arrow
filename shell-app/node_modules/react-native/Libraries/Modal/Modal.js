module.exports = function(g, r, i, a, m, e, d) {
  'use strict';
  var t, n = r(d[0]),
      o = r(d[1]),
      s = r(d[2]),
      p = r(d[3]),
      l = r(d[4]),
      u = r(d[5]),
      c = "/Users/linyiting/Desktop/Arrow/arrow/node_modules/react-native/Libraries/Modal/Modal.js",
      h = (r(d[6]), r(d[7])),
      v = (r(d[8]), r(d[9]), r(d[10]), r(d[11])),
      f = r(d[12]),
      y = r(d[13]),
      S = r(d[14]),
      _ = r(d[15]),
      b = 0,
      w = (function(t) {
          function n(t) {
              var s;
              return o(this, n), s = p(this, l(n).call(this, t)), n._confirmProps(t), s._identifier = b++, s
          }
          return u(n, t), s(n, [{
              key: "getChildContext",
              value: function() {
                  return {
                      virtualizedList: null
                  }
              }
          }, {
              key: "componentDidMount",
              value: function() {}
          }, {
              key: "componentWillUnmount",
              value: function() {
                  this._eventSubscription && this._eventSubscription.remove()
              }
          }, {
              key: "UNSAFE_componentWillReceiveProps",
              value: function(t) {
                  n._confirmProps(t)
              }
          }, {
              key: "render",
              value: function() {
                  if (!0 !== this.props.visible) return null;
                  var t = {
                          backgroundColor: this.props.transparent ? 'transparent' : 'white'
                      },
                      n = this.props.animationType;
                  n || (n = 'none', this.props.animated && (n = 'slide'));
                  var o = this.props.presentationStyle;
                  o || (o = 'fullScreen', this.props.transparent && (o = 'overFullScreen'));
                  var s = this.props.children;
                  return v.createElement(_, {
                      animationType: n,
                      presentationStyle: o,
                      transparent: this.props.transparent,
                      hardwareAccelerated: this.props.hardwareAccelerated,
                      onRequestClose: this.props.onRequestClose,
                      onShow: this.props.onShow,
                      identifier: this._identifier,
                      style: C.modal,
                      onStartShouldSetResponder: this._shouldSetResponder,
                      supportedOrientations: this.props.supportedOrientations,
                      onOrientationChange: this.props.onOrientationChange,
                      __source: {
                          fileName: c,
                          lineNumber: 252
                      }
                  }, v.createElement(S, {
                      style: [C.container, t],
                      __source: {
                          fileName: c,
                          lineNumber: 264
                      }
                  }, s))
              }
          }, {
              key: "_shouldSetResponder",
              value: function() {
                  return !0
              }
          }], [{
              key: "_confirmProps",
              value: function(t) {
                  t.presentationStyle && 'overFullScreen' !== t.presentationStyle && t.transparent && console.warn("Modal with '" + t.presentationStyle + "' presentation style and 'transparent' value is not supported.")
              }
          }]), n
      })(v.Component);
  w.defaultProps = {
      visible: !0,
      hardwareAccelerated: !1
  }, w.contextTypes = {
      rootTag: f.number
  }, w.childContextTypes = {
      virtualizedList: f.object
  };
  var k = h.isRTL ? 'right' : 'left',
      C = y.create({
          modal: {
              position: 'absolute'
          },
          container: (t = {
              position: 'absolute'
          }, n(t, k, 0), n(t, "top", 0), t)
      });
  m.exports = w
}