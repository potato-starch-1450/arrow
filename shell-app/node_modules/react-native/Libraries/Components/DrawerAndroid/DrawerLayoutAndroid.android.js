module.exports = function(g, r, i, a, m, e, d) {
  'use strict';
  var t = r(d[0]),
      o = r(d[1]),
      n = r(d[2]),
      s = r(d[3]),
      u = r(d[4]),
      l = r(d[5]),
      p = r(d[6]),
      c = "/Users/linyiting/Desktop/Arrow/arrow/node_modules/react-native/Libraries/Components/DrawerAndroid/DrawerLayoutAndroid.android.js",
      w = r(d[7]),
      h = r(d[8]),
      f = r(d[9]),
      D = r(d[10]),
      v = r(d[11]),
      _ = r(d[12]),
      C = r(d[13]),
      y = r(d[14]),
      b = _.getViewManagerConfig('AndroidDrawerLayout').Constants,
      k = r(d[15]),
      S = r(d[16]),
      N = ['Idle', 'Dragging', 'Settling'],
      B = (function(v) {
          function b() {
              var t, o;
              n(this, b);
              for (var s = arguments.length, p = new Array(s), c = 0; c < s; c++) p[c] = arguments[c];
              return (o = u(this, (t = l(b)).call.apply(t, [this].concat(p))))._nativeRef = h.createRef(), o.state = {
                  statusBarBackgroundColor: null
              }, o._onDrawerSlide = function(t) {
                  o.props.onDrawerSlide && o.props.onDrawerSlide(t), 'on-drag' === o.props.keyboardDismissMode && k()
              }, o._onDrawerOpen = function() {
                  o.props.onDrawerOpen && o.props.onDrawerOpen()
              }, o._onDrawerClose = function() {
                  o.props.onDrawerClose && o.props.onDrawerClose()
              }, o._onDrawerStateChanged = function(t) {
                  o.props.onDrawerStateChanged && o.props.onDrawerStateChanged(N[t.nativeEvent.drawerState])
              }, o
          }
          return p(b, v), s(b, [{
              key: "render",
              value: function() {
                  var n = this.props,
                      s = (n.onDrawerStateChanged, o(n, ["onDrawerStateChanged"])),
                      u = w.Version >= 21 && this.props.statusBarBackgroundColor,
                      l = h.createElement(C, {
                          style: [L.drawerSubview, {
                              width: this.props.drawerWidth,
                              backgroundColor: this.props.drawerBackgroundColor
                          }],
                          collapsable: !1,
                          __source: {
                              fileName: c,
                              lineNumber: 184
                          }
                      }, this.props.renderNavigationView(), u && h.createElement(C, {
                          style: L.drawerStatusBar,
                          __source: {
                              fileName: c,
                              lineNumber: 194
                          }
                      })),
                      p = h.createElement(C, {
                          style: L.mainSubview,
                          collapsable: !1,
                          __source: {
                              fileName: c,
                              lineNumber: 198
                          }
                      }, u && h.createElement(D, {
                          translucent: !0,
                          backgroundColor: this.props.statusBarBackgroundColor,
                          __source: {
                              fileName: c,
                              lineNumber: 200
                          }
                      }), u && h.createElement(C, {
                          style: [L.statusBar, {
                              backgroundColor: this.props.statusBarBackgroundColor
                          }],
                          __source: {
                              fileName: c,
                              lineNumber: 206
                          }
                      }), this.props.children);
                  return h.createElement(S, t({}, s, {
                      ref: this._nativeRef,
                      drawerWidth: this.props.drawerWidth,
                      drawerPosition: this.props.drawerPosition,
                      drawerLockMode: this.props.drawerLockMode,
                      style: [L.base, this.props.style],
                      onDrawerSlide: this._onDrawerSlide,
                      onDrawerOpen: this._onDrawerOpen,
                      onDrawerClose: this._onDrawerClose,
                      onDrawerStateChanged: this._onDrawerStateChanged,
                      __source: {
                          fileName: c,
                          lineNumber: 217
                      }
                  }), p, l)
              }
          }, {
              key: "openDrawer",
              value: function() {
                  _.dispatchViewManagerCommand(this._getDrawerLayoutHandle(), _.getViewManagerConfig('AndroidDrawerLayout').Commands.openDrawer, null)
              }
          }, {
              key: "closeDrawer",
              value: function() {
                  _.dispatchViewManagerCommand(this._getDrawerLayoutHandle(), _.getViewManagerConfig('AndroidDrawerLayout').Commands.closeDrawer, null)
              }
          }, {
              key: "_getDrawerLayoutHandle",
              value: function() {
                  return f.findNodeHandle(this._nativeRef.current)
              }
          }, {
              key: "blur",
              value: function() {
                  y(this._nativeRef.current).blur()
              }
          }, {
              key: "focus",
              value: function() {
                  y(this._nativeRef.current).focus()
              }
          }, {
              key: "measure",
              value: function(t) {
                  y(this._nativeRef.current).measure(t)
              }
          }, {
              key: "measureInWindow",
              value: function(t) {
                  y(this._nativeRef.current).measureInWindow(t)
              }
          }, {
              key: "measureLayout",
              value: function(t, o, n) {
                  y(this._nativeRef.current).measureLayout(t, o, n)
              }
          }, {
              key: "setNativeProps",
              value: function(t) {
                  y(this._nativeRef.current).setNativeProps(t)
              }
          }]), b
      })(h.Component);
  B.positions = b.DrawerPosition, B.defaultProps = {
      drawerBackgroundColor: 'white'
  };
  var L = v.create({
      base: {
          flex: 1,
          elevation: 16
      },
      mainSubview: {
          position: 'absolute',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0
      },
      drawerSubview: {
          position: 'absolute',
          top: 0,
          bottom: 0
      },
      statusBar: {
          height: D.currentHeight
      },
      drawerStatusBar: {
          position: 'absolute',
          top: 0,
          left: 0,
          right: 0,
          height: D.currentHeight,
          backgroundColor: 'rgba(0, 0, 0, 0.251)'
      }
  });
  m.exports = B
}