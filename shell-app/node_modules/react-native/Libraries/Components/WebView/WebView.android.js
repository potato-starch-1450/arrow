module.exports = function(g, r, i, a, m, e, d) {
  'use strict';
  var t = r(d[0]),
      n = r(d[1]),
      o = r(d[2]),
      s = r(d[3]),
      l = r(d[4]),
      c = r(d[5]),
      p = r(d[6]),
      u = "/Users/linyiting/Desktop/Arrow/arrow/node_modules/react-native/Libraries/Components/WebView/WebView.android.js";

  function h(t, n) {
      var o = Object.keys(t);
      if (Object.getOwnPropertySymbols) {
          var s = Object.getOwnPropertySymbols(t);
          n && (s = s.filter(function(n) {
              return Object.getOwnPropertyDescriptor(t, n).enumerable
          })), o.push.apply(o, s)
      }
      return o
  }
  var b = r(d[7]),
      f = r(d[8]),
      w = r(d[9]),
      v = r(d[10]),
      E = r(d[11]),
      S = r(d[12]),
      C = r(d[13]),
      y = r(d[14]),
      L = r(d[15]),
      V = r(d[16]),
      O = r(d[17]),
      D = r(d[18]),
      P = r(d[19]),
      j = r(d[20]),
      A = 'webview',
      R = D({
          IDLE: null,
          LOADING: null,
          ERROR: null
      }),
      W = function() {
          return E.createElement(L, {
              style: M.loadingView,
              __source: {
                  fileName: u,
                  lineNumber: 37
              }
          }, E.createElement(b, {
              style: M.loadingProgressBar,
              __source: {
                  fileName: u,
                  lineNumber: 38
              }
          }))
      },
      F = (function(t) {
          function h() {
              var t, n;
              o(this, h);
              for (var s = arguments.length, p = new Array(s), u = 0; u < s; u++) p[u] = arguments[u];
              return (n = l(this, (t = c(h)).call.apply(t, [this].concat(p)))).state = {
                  viewState: R.IDLE,
                  lastErrorEvent: null,
                  startInLoadingState: !0
              }, n.goForward = function() {
                  y.dispatchViewManagerCommand(n.getWebViewHandle(), y.getViewManagerConfig('RCTWebView').Commands.goForward, null)
              }, n.goBack = function() {
                  y.dispatchViewManagerCommand(n.getWebViewHandle(), y.getViewManagerConfig('RCTWebView').Commands.goBack, null)
              }, n.reload = function() {
                  n.setState({
                      viewState: R.LOADING
                  }), y.dispatchViewManagerCommand(n.getWebViewHandle(), y.getViewManagerConfig('RCTWebView').Commands.reload, null)
              }, n.stopLoading = function() {
                  y.dispatchViewManagerCommand(n.getWebViewHandle(), y.getViewManagerConfig('RCTWebView').Commands.stopLoading, null)
              }, n.postMessage = function(t) {
                  y.dispatchViewManagerCommand(n.getWebViewHandle(), y.getViewManagerConfig('RCTWebView').Commands.postMessage, [String(t)])
              }, n.injectJavaScript = function(t) {
                  y.dispatchViewManagerCommand(n.getWebViewHandle(), y.getViewManagerConfig('RCTWebView').Commands.injectJavaScript, [t])
              }, n.updateNavigationState = function(t) {
                  n.props.onNavigationStateChange && n.props.onNavigationStateChange(t.nativeEvent)
              }, n.getWebViewHandle = function() {
                  return S.findNodeHandle(n.refs[A])
              }, n.onLoadingStart = function(t) {
                  var o = n.props.onLoadStart;
                  o && o(t), n.updateNavigationState(t)
              }, n.onLoadingError = function(t) {
                  t.persist();
                  var o = n.props,
                      s = o.onError,
                      l = o.onLoadEnd;
                  s && s(t), l && l(t), console.warn('Encountered an error loading page', t.nativeEvent), n.setState({
                      lastErrorEvent: t.nativeEvent,
                      viewState: R.ERROR
                  })
              }, n.onLoadingFinish = function(t) {
                  var o = n.props,
                      s = o.onLoad,
                      l = o.onLoadEnd;
                  s && s(t), l && l(t), n.setState({
                      viewState: R.IDLE
                  }), n.updateNavigationState(t)
              }, n.onMessage = function(t) {
                  var o = n.props.onMessage;
                  o && o(t)
              }, n
          }
          return p(h, t), s(h, [{
              key: "UNSAFE_componentWillMount",
              value: function() {
                  this.props.startInLoadingState && this.setState({
                      viewState: R.LOADING
                  })
              }
          }, {
              key: "render",
              value: function() {
                  var t = null;
                  if (this.state.viewState === R.LOADING) t = (this.props.renderLoading || W)();
                  else if (this.state.viewState === R.ERROR) {
                      var o = this.state.lastErrorEvent;
                      t = this.props.renderError && this.props.renderError(o.domain, o.code, o.description)
                  } else this.state.viewState !== R.IDLE && console.error('RCTWebView invalid state encountered: ' + this.state.loading);
                  var s = [M.container, this.props.style];
                  this.state.viewState !== R.LOADING && this.state.viewState !== R.ERROR || s.push(M.hidden);
                  var l = this.props.source || {};
                  this.props.html ? l.html = this.props.html : this.props.url && (l.uri = this.props.url), 'POST' === l.method && l.headers ? console.warn('WebView: `source.headers` is not supported when using POST.') : 'GET' === l.method && l.body && console.warn('WebView: `source.body` is not supported when using GET.');
                  var c = this.props.nativeConfig || {},
                      p = (this.props.originWhitelist || []).map(V.originWhitelistToRegex),
                      h = c.component || I,
                      b = E.createElement(h, n({
                          ref: A,
                          key: "webViewKey",
                          style: s,
                          source: j(l),
                          scalesPageToFit: this.props.scalesPageToFit,
                          allowFileAccess: this.props.allowFileAccess,
                          injectedJavaScript: this.props.injectedJavaScript,
                          userAgent: this.props.userAgent,
                          javaScriptEnabled: this.props.javaScriptEnabled,
                          hardwareAccelerationEnabledExperimental: this.props.hardwareAccelerationEnabledExperimental,
                          thirdPartyCookiesEnabled: this.props.thirdPartyCookiesEnabled,
                          domStorageEnabled: this.props.domStorageEnabled,
                          messagingEnabled: 'function' == typeof this.props.onMessage,
                          onMessage: this.onMessage,
                          contentInset: this.props.contentInset,
                          automaticallyAdjustContentInsets: this.props.automaticallyAdjustContentInsets,
                          onContentSizeChange: this.props.onContentSizeChange,
                          onLoadingStart: this.onLoadingStart,
                          onLoadingFinish: this.onLoadingFinish,
                          onLoadingError: this.onLoadingError,
                          testID: this.props.testID,
                          geolocationEnabled: this.props.geolocationEnabled,
                          mediaPlaybackRequiresUserAction: this.props.mediaPlaybackRequiresUserAction,
                          allowUniversalAccessFromFileURLs: this.props.allowUniversalAccessFromFileURLs,
                          originWhitelist: p,
                          mixedContentMode: this.props.mixedContentMode,
                          saveFormDataDisabled: this.props.saveFormDataDisabled,
                          urlPrefixesForDefaultIntent: this.props.urlPrefixesForDefaultIntent
                      }, c.props, {
                          __source: {
                              fileName: u,
                              lineNumber: 331
                          }
                      }));
                  return E.createElement(L, {
                      style: M.container,
                      __source: {
                          fileName: u,
                          lineNumber: 373
                      }
                  }, b, t)
              }
          }]), h
      })(E.Component);
  F.propTypes = (function(n) {
      for (var o = 1; o < arguments.length; o++) {
          var s = null != arguments[o] ? arguments[o] : {};
          o % 2 ? h(s, !0).forEach(function(o) {
              t(n, o, s[o])
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(n, Object.getOwnPropertyDescriptors(s)) : h(s).forEach(function(t) {
              Object.defineProperty(n, t, Object.getOwnPropertyDescriptor(s, t))
          })
      }
      return n
  })({}, f, {
      renderError: v.func,
      renderLoading: v.func,
      onLoad: v.func,
      onLoadEnd: v.func,
      onLoadStart: v.func,
      onError: v.func,
      automaticallyAdjustContentInsets: v.bool,
      contentInset: w,
      onNavigationStateChange: v.func,
      onMessage: v.func,
      onContentSizeChange: v.func,
      startInLoadingState: v.bool,
      style: f.style,
      html: O(v.string, 'Use the `source` prop instead.'),
      url: O(v.string, 'Use the `source` prop instead.'),
      source: v.oneOfType([v.shape({
          uri: v.string,
          method: v.oneOf(['GET', 'POST']),
          headers: v.object,
          body: v.string
      }), v.shape({
          html: v.string,
          baseUrl: v.string
      }), v.number]),
      useWebKit: v.bool,
      hardwareAccelerationEnabledExperimental: v.bool,
      javaScriptEnabled: v.bool,
      thirdPartyCookiesEnabled: v.bool,
      domStorageEnabled: v.bool,
      geolocationEnabled: v.bool,
      injectedJavaScript: v.string,
      scalesPageToFit: v.bool,
      allowFileAccess: v.bool,
      userAgent: v.string,
      testID: v.string,
      mediaPlaybackRequiresUserAction: v.bool,
      allowUniversalAccessFromFileURLs: v.bool,
      originWhitelist: v.arrayOf(v.string),
      injectJavaScript: v.func,
      mixedContentMode: v.oneOf(['never', 'always', 'compatibility']),
      saveFormDataDisabled: v.bool,
      nativeConfig: v.shape({
          component: v.any,
          props: v.object,
          viewManager: v.object
      }),
      urlPrefixesForDefaultIntent: v.arrayOf(v.string)
  }), F.defaultProps = {
      javaScriptEnabled: !0,
      thirdPartyCookiesEnabled: !0,
      scalesPageToFit: !0,
      hardwareAccelerationEnabledExperimental: !0,
      saveFormDataDisabled: !1,
      originWhitelist: V.defaultOriginWhitelist
  };
  var I = P('RCTWebView'),
      M = C.create({
          container: {
              flex: 1
          },
          hidden: {
              height: 0,
              flex: 0
          },
          loadingView: {
              flex: 1,
              justifyContent: 'center',
              alignItems: 'center'
          },
          loadingProgressBar: {
              height: 20
          }
      });
  m.exports = F
}