module.exports = function(g, r, i, a, m, e, d) {
  'use strict';
  var t = r(d[0]),
      n = r(d[1]),
      o = r(d[2]),
      s = r(d[3]),
      l = r(d[4]),
      c = r(d[5]),
      u = r(d[6]),
      p = "/Users/linyiting/Desktop/Arrow/arrow/node_modules/react-native/Libraries/Components/TextInput/TextInput.js";

  function h(t, n) {
      var o = Object.keys(t);
      if (Object.getOwnPropertySymbols) {
          var s = Object.getOwnPropertySymbols(t);
          n && (s = s.filter(function(n) {
              return Object.getOwnPropertyDescriptor(t, n).enumerable
          })), o.push.apply(o, s)
      }
      return o
  }
  var f, b = r(d[7]),
      y = r(d[8]),
      _ = r(d[9]),
      v = r(d[10]),
      S = (r(d[11]), r(d[12])),
      C = r(d[13]),
      x = r(d[14]),
      T = r(d[15]),
      N = r(d[16]),
      I = r(d[17]),
      F = r(d[18]),
      R = r(d[19]),
      O = r(d[20]),
      w = r(d[21]),
      D = r(d[22]),
      P = r(d[23]);
  r(d[24]);
  f = P('AndroidTextInput');
  var E = ['phoneNumber', 'link', 'address', 'calendarEvent', 'none', 'all'],
      L = function() {
          return !0
      },
      j = w({
          displayName: 'TextInput',
          statics: {
              State: {
                  currentlyFocusedField: F.currentlyFocusedField,
                  focusTextInput: F.focusTextInput,
                  blurTextInput: F.blurTextInput
              }
          },
          propTypes: (function(t) {
              for (var n = 1; n < arguments.length; n++) {
                  var o = null != arguments[n] ? arguments[n] : {};
                  n % 2 ? h(o, !0).forEach(function(n) {
                      u(t, n, o[n])
                  }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(o)) : h(o).forEach(function(n) {
                      Object.defineProperty(t, n, Object.getOwnPropertyDescriptor(o, n))
                  })
              }
              return t
          })({}, y, {
              autoCapitalize: S.oneOf(['none', 'sentences', 'words', 'characters']),
              autoCompleteType: S.oneOf(['cc-csc', 'cc-exp', 'cc-exp-month', 'cc-exp-year', 'cc-number', 'email', 'name', 'password', 'postal-code', 'street-address', 'tel', 'username', 'off']),
              autoCorrect: S.bool,
              spellCheck: S.bool,
              autoFocus: S.bool,
              allowFontScaling: S.bool,
              maxFontSizeMultiplier: S.number,
              editable: S.bool,
              keyboardType: S.oneOf(['default', 'email-address', 'numeric', 'phone-pad', 'number-pad', 'ascii-capable', 'numbers-and-punctuation', 'url', 'name-phone-pad', 'decimal-pad', 'twitter', 'web-search', 'visible-password']),
              keyboardAppearance: S.oneOf(['default', 'light', 'dark']),
              returnKeyType: S.oneOf(['done', 'go', 'next', 'search', 'send', 'none', 'previous', 'default', 'emergency-call', 'google', 'join', 'route', 'yahoo']),
              returnKeyLabel: S.string,
              maxLength: S.number,
              numberOfLines: S.number,
              disableFullscreenUI: S.bool,
              enablesReturnKeyAutomatically: S.bool,
              multiline: S.bool,
              textBreakStrategy: S.oneOf(['simple', 'highQuality', 'balanced']),
              onBlur: S.func,
              onFocus: S.func,
              onChange: S.func,
              onChangeText: S.func,
              onContentSizeChange: S.func,
              onTextInput: S.func,
              onEndEditing: S.func,
              onSelectionChange: S.func,
              onSubmitEditing: S.func,
              onKeyPress: S.func,
              onLayout: S.func,
              onScroll: S.func,
              placeholder: S.string,
              placeholderTextColor: b,
              scrollEnabled: S.bool,
              secureTextEntry: S.bool,
              selectionColor: b,
              selectionState: S.instanceOf(_),
              selection: S.shape({
                  start: S.number.isRequired,
                  end: S.number
              }),
              value: S.string,
              defaultValue: S.string,
              clearButtonMode: S.oneOf(['never', 'while-editing', 'unless-editing', 'always']),
              clearTextOnFocus: S.bool,
              selectTextOnFocus: S.bool,
              blurOnSubmit: S.bool,
              style: N.propTypes.style,
              underlineColorAndroid: b,
              inlineImageLeft: S.string,
              inlineImagePadding: S.number,
              rejectResponderTermination: S.bool,
              dataDetectorTypes: S.oneOfType([S.oneOf(E), S.arrayOf(S.oneOf(E))]),
              caretHidden: S.bool,
              contextMenuHidden: S.bool,
              inputAccessoryViewID: S.string,
              textContentType: S.oneOf(['none', 'URL', 'addressCity', 'addressCityAndState', 'addressState', 'countryName', 'creditCardNumber', 'emailAddress', 'familyName', 'fullStreetAddress', 'givenName', 'jobTitle', 'location', 'middleName', 'name', 'namePrefix', 'nameSuffix', 'nickname', 'organizationName', 'postalCode', 'streetAddressLine1', 'streetAddressLine2', 'sublocality', 'telephoneNumber', 'username', 'password', 'newPassword', 'oneTimeCode'])
          }),
          getDefaultProps: function() {
              return {
                  allowFontScaling: !0,
                  rejectResponderTermination: !0,
                  underlineColorAndroid: 'transparent'
              }
          },
          mixins: [v],
          isFocused: function() {
              return F.currentlyFocusedField() === x.findNodeHandle(this._inputRef)
          },
          _inputRef: void 0,
          _focusSubscription: void 0,
          _lastNativeText: void 0,
          _lastNativeSelection: void 0,
          _rafId: null,
          componentDidMount: function() {
              this._lastNativeText = this.props.value;
              var t = x.findNodeHandle(this._inputRef);
              null != t && F.registerInput(t), this.props.autoFocus && (this._rafId = requestAnimationFrame(this.focus))
          },
          componentWillUnmount: function() {
              this._focusSubscription && this._focusSubscription.remove(), this.isFocused() && this.blur();
              var t = x.findNodeHandle(this._inputRef);
              null != t && F.unregisterInput(t), null != this._rafId && cancelAnimationFrame(this._rafId)
          },
          clear: function() {
              this.setNativeProps({
                  text: ''
              })
          },
          render: function() {
              var t;
              return t = this._renderAndroid(), C.createElement(I.Provider, {
                  value: !0,
                  __source: {
                      fileName: p,
                      lineNumber: 1002
                  }
              }, t)
          },
          _getText: function() {
              return 'string' == typeof this.props.value ? this.props.value : 'string' == typeof this.props.defaultValue ? this.props.defaultValue : ''
          },
          _setNativeRef: function(t) {
              this._inputRef = t
          },
          _renderIOSLegacy: function() {
              var t, n = c({}, this.props);
              if (n.style = [this.props.style], n.selection && null == n.selection.end && (n.selection = {
                      start: n.selection.start,
                      end: n.selection.start
                  }), n.multiline) {
                  var o = n.children,
                      s = 0;
                  C.Children.forEach(o, function() {
                      return ++s
                  }), D(!(n.value && s), 'Cannot specify both value and children.'), s >= 1 && (o = C.createElement(N, {
                      style: n.style,
                      allowFontScaling: n.allowFontScaling,
                      maxFontSizeMultiplier: n.maxFontSizeMultiplier,
                      __source: {
                          fileName: p,
                          lineNumber: 1066
                      }
                  }, o)), n.inputView && (o = [o, n.inputView]), n.style.unshift(B.multilineInput), t = C.createElement(void 0, c({
                      ref: this._setNativeRef
                  }, n, {
                      children: o,
                      onFocus: this._onFocus,
                      onBlur: this._onBlur,
                      onChange: this._onChange,
                      onContentSizeChange: this.props.onContentSizeChange,
                      onSelectionChange: this._onSelectionChange,
                      onTextInput: this._onTextInput,
                      onSelectionChangeShouldSetResponder: L,
                      text: this._getText(),
                      dataDetectorTypes: this.props.dataDetectorTypes,
                      onScroll: this._onScroll,
                      __source: {
                          fileName: p,
                          lineNumber: 1079
                      }
                  }))
              } else t = C.createElement(void 0, c({
                  ref: this._setNativeRef
              }, n, {
                  onFocus: this._onFocus,
                  onBlur: this._onBlur,
                  onChange: this._onChange,
                  onSelectionChange: this._onSelectionChange,
                  onSelectionChangeShouldSetResponder: L,
                  text: this._getText(),
                  __source: {
                      fileName: p,
                      lineNumber: 1045
                  }
              }));
              return C.createElement(R, {
                  onLayout: n.onLayout,
                  onPress: this._onPress,
                  rejectResponderTermination: !0,
                  accessible: n.accessible,
                  accessibilityLabel: n.accessibilityLabel,
                  accessibilityRole: n.accessibilityRole,
                  accessibilityStates: n.accessibilityStates,
                  nativeID: this.props.nativeID,
                  testID: n.testID,
                  __source: {
                      fileName: p,
                      lineNumber: 1098
                  }
              }, t)
          },
          _renderIOS: function() {
              var t = c({}, this.props);
              t.style = [this.props.style], t.selection && null == t.selection.end && (t.selection = {
                  start: t.selection.start,
                  end: t.selection.start
              });
              var n = void t.multiline;
              t.multiline && t.style.unshift(B.multilineInput);
              var o = C.createElement(n, c({
                  ref: this._setNativeRef
              }, t, {
                  onFocus: this._onFocus,
                  onBlur: this._onBlur,
                  onChange: this._onChange,
                  onContentSizeChange: this.props.onContentSizeChange,
                  onSelectionChange: this._onSelectionChange,
                  onTextInput: this._onTextInput,
                  onSelectionChangeShouldSetResponder: L,
                  text: this._getText(),
                  dataDetectorTypes: this.props.dataDetectorTypes,
                  onScroll: this._onScroll,
                  __source: {
                      fileName: p,
                      lineNumber: 1133
                  }
              }));
              return C.createElement(R, {
                  onLayout: t.onLayout,
                  onPress: this._onPress,
                  rejectResponderTermination: t.rejectResponderTermination,
                  accessible: t.accessible,
                  accessibilityLabel: t.accessibilityLabel,
                  accessibilityRole: t.accessibilityRole,
                  accessibilityStates: t.accessibilityStates,
                  nativeID: this.props.nativeID,
                  testID: t.testID,
                  __source: {
                      fileName: p,
                      lineNumber: 1150
                  }
              }, o)
          },
          _renderAndroid: function() {
              var t = c({}, this.props);
              t.style = [this.props.style], t.autoCapitalize = O.getViewManagerConfig('AndroidTextInput').Constants.AutoCapitalizationType[t.autoCapitalize || 'sentences'];
              var n = this.props.children,
                  o = 0;
              C.Children.forEach(n, function() {
                  return ++o
              }), D(!(this.props.value && o), 'Cannot specify both value and children.'), o > 1 && (n = C.createElement(N, {
                  __source: {
                      fileName: p,
                      lineNumber: 1182
                  }
              }, n)), t.selection && null == t.selection.end && (t.selection = {
                  start: t.selection.start,
                  end: t.selection.start
              });
              var s = C.createElement(f, c({
                  ref: this._setNativeRef
              }, t, {
                  mostRecentEventCount: 0,
                  onFocus: this._onFocus,
                  onBlur: this._onBlur,
                  onChange: this._onChange,
                  onSelectionChange: this._onSelectionChange,
                  onTextInput: this._onTextInput,
                  text: this._getText(),
                  children: n,
                  disableFullscreenUI: this.props.disableFullscreenUI,
                  textBreakStrategy: this.props.textBreakStrategy,
                  onScroll: this._onScroll,
                  __source: {
                      fileName: p,
                      lineNumber: 1193
                  }
              }));
              return C.createElement(R, {
                  onLayout: t.onLayout,
                  onPress: this._onPress,
                  accessible: this.props.accessible,
                  accessibilityLabel: this.props.accessibilityLabel,
                  accessibilityRole: this.props.accessibilityRole,
                  accessibilityStates: this.props.accessibilityStates,
                  nativeID: this.props.nativeID,
                  testID: this.props.testID,
                  __source: {
                      fileName: p,
                      lineNumber: 1211
                  }
              }, s)
          },
          _onFocus: function(t) {
              this.props.onFocus && this.props.onFocus(t), this.props.selectionState && this.props.selectionState.focus()
          },
          _onPress: function(t) {
              (this.props.editable || void 0 === this.props.editable) && this.focus()
          },
          _onChange: function(t) {
              this._inputRef && this._inputRef.setNativeProps && this._inputRef.setNativeProps({
                  mostRecentEventCount: t.nativeEvent.eventCount
              });
              var n = t.nativeEvent.text;
              this.props.onChange && this.props.onChange(t), this.props.onChangeText && this.props.onChangeText(n), this._inputRef && (this._lastNativeText = n, this.forceUpdate())
          },
          _onSelectionChange: function(t) {
              this.props.onSelectionChange && this.props.onSelectionChange(t), this._inputRef && (this._lastNativeSelection = t.nativeEvent.selection, (this.props.selection || this.props.selectionState) && this.forceUpdate())
          },
          componentDidUpdate: function() {
              var t = {};
              this._lastNativeText !== this.props.value && 'string' == typeof this.props.value && (t.text = this.props.value);
              var n = this.props.selection;
              this._lastNativeSelection && n && (this._lastNativeSelection.start !== n.start || this._lastNativeSelection.end !== n.end) && (t.selection = this.props.selection), Object.keys(t).length > 0 && this._inputRef && this._inputRef.setNativeProps && this._inputRef.setNativeProps(t), this.props.selectionState && n && this.props.selectionState.update(n.start, n.end)
          },
          _onBlur: function(t) {
              this.blur(), this.props.onBlur && this.props.onBlur(t), this.props.selectionState && this.props.selectionState.blur()
          },
          _onTextInput: function(t) {
              this.props.onTextInput && this.props.onTextInput(t)
          },
          _onScroll: function(t) {
              this.props.onScroll && this.props.onScroll(t)
          }
      }),
      A = ((function(c) {
          function u() {
              return t(this, u), o(this, s(u).apply(this, arguments))
          }
          l(u, c), n(u, [{
              key: "clear",
              value: function() {}
          }, {
              key: "isFocused",
              value: function() {}
          }])
      })(x.NativeComponent), j),
      B = T.create({
          multilineInput: {
              paddingTop: 5
          }
      });
  m.exports = A
}