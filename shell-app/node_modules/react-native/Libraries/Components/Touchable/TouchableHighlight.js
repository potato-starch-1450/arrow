module.exports = function(g, r, i, a, m, e, d) {
  'use strict';
  var t = r(d[0]);

  function s(t, s) {
      var o = Object.keys(t);
      if (Object.getOwnPropertySymbols) {
          var n = Object.getOwnPropertySymbols(t);
          s && (n = n.filter(function(s) {
              return Object.getOwnPropertyDescriptor(t, s).enumerable
          })), o.push.apply(o, n)
      }
      return o
  }

  function o(o) {
      for (var n = 1; n < arguments.length; n++) {
          var l = null != arguments[n] ? arguments[n] : {};
          n % 2 ? s(l, !0).forEach(function(s) {
              t(o, s, l[s])
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(o, Object.getOwnPropertyDescriptors(l)) : s(l).forEach(function(t) {
              Object.defineProperty(o, t, Object.getOwnPropertyDescriptor(l, t))
          })
      }
      return o
  }
  var n = r(d[1]),
      l = r(d[2]),
      p = r(d[3]),
      h = r(d[4]),
      u = r(d[5]),
      c = r(d[6]),
      y = r(d[7]),
      b = r(d[8]),
      f = r(d[9]),
      P = r(d[10]),
      S = r(d[11]),
      O = r(d[12]),
      _ = r(d[13]),
      T = {
          activeOpacity: .85,
          delayPressOut: 100,
          underlayColor: 'black'
      },
      v = {
          top: 20,
          left: 20,
          right: 20,
          bottom: 30
      },
      H = O({
          displayName: 'TouchableHighlight',
          propTypes: o({}, P.propTypes, {
              activeOpacity: u.number,
              underlayColor: n,
              style: l.style,
              onShowUnderlay: u.func,
              onHideUnderlay: u.func,
              hasTVPreferredFocus: u.bool,
              tvParallaxProperties: u.object,
              testOnly_pressed: u.bool
          }),
          mixins: [p, f.Mixin.withoutDefaultFocusAndBlur],
          getDefaultProps: function() {
              return T
          },
          getInitialState: function() {
              return this._isMounted = !1, this.props.testOnly_pressed ? o({}, this.touchableGetInitialState(), {
                  extraChildStyle: {
                      opacity: this.props.activeOpacity
                  },
                  extraUnderlayStyle: {
                      backgroundColor: this.props.underlayColor
                  }
              }) : o({}, this.touchableGetInitialState(), {
                  extraChildStyle: null,
                  extraUnderlayStyle: null
              })
          },
          componentDidMount: function() {
              this._isMounted = !0, _(this.props)
          },
          componentWillUnmount: function() {
              this._isMounted = !1, clearTimeout(this._hideTimeout)
          },
          UNSAFE_componentWillReceiveProps: function(t) {
              _(t)
          },
          viewConfig: {
              uiViewClassName: 'RCTView',
              validAttributes: y.RCTView
          },
          touchableHandleActivePressIn: function(t) {
              clearTimeout(this._hideTimeout), this._hideTimeout = null, this._showUnderlay(), this.props.onPressIn && this.props.onPressIn(t)
          },
          touchableHandleActivePressOut: function(t) {
              this._hideTimeout || this._hideUnderlay(), this.props.onPressOut && this.props.onPressOut(t)
          },
          touchableHandleFocus: function(t) {
              h.isTV && this._showUnderlay(), this.props.onFocus && this.props.onFocus(t)
          },
          touchableHandleBlur: function(t) {
              h.isTV && this._hideUnderlay(), this.props.onBlur && this.props.onBlur(t)
          },
          touchableHandlePress: function(t) {
              clearTimeout(this._hideTimeout), h.isTV || (this._showUnderlay(), this._hideTimeout = setTimeout(this._hideUnderlay, this.props.delayPressOut)), this.props.onPress && this.props.onPress(t)
          },
          touchableHandleLongPress: function(t) {
              this.props.onLongPress && this.props.onLongPress(t)
          },
          touchableGetPressRectOffset: function() {
              return this.props.pressRetentionOffset || v
          },
          touchableGetHitSlop: function() {
              return this.props.hitSlop
          },
          touchableGetHighlightDelayMS: function() {
              return this.props.delayPressIn
          },
          touchableGetLongPressDelayMS: function() {
              return this.props.delayLongPress
          },
          touchableGetPressOutDelayMS: function() {
              return this.props.delayPressOut
          },
          _showUnderlay: function() {
              this._isMounted && this._hasPressHandler() && (this.setState({
                  extraChildStyle: {
                      opacity: this.props.activeOpacity
                  },
                  extraUnderlayStyle: {
                      backgroundColor: this.props.underlayColor
                  }
              }), this.props.onShowUnderlay && this.props.onShowUnderlay())
          },
          _hideUnderlay: function() {
              clearTimeout(this._hideTimeout), this._hideTimeout = null, this.props.testOnly_pressed || this._hasPressHandler() && (this.setState({
                  extraChildStyle: null,
                  extraUnderlayStyle: null
              }), this.props.onHideUnderlay && this.props.onHideUnderlay())
          },
          _hasPressHandler: function() {
              return !!(this.props.onPress || this.props.onPressIn || this.props.onPressOut || this.props.onLongPress)
          },
          render: function() {
              var t = c.Children.only(this.props.children);
              return c.createElement(S, {
                  accessible: !1 !== this.props.accessible,
                  accessibilityLabel: this.props.accessibilityLabel,
                  accessibilityHint: this.props.accessibilityHint,
                  accessibilityRole: this.props.accessibilityRole,
                  accessibilityStates: this.props.accessibilityStates,
                  style: b.compose(this.props.style, this.state.extraUnderlayStyle),
                  onLayout: this.props.onLayout,
                  hitSlop: this.props.hitSlop,
                  isTVSelectable: !0,
                  tvParallaxProperties: this.props.tvParallaxProperties,
                  hasTVPreferredFocus: this.props.hasTVPreferredFocus,
                  onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,
                  onResponderTerminationRequest: this.touchableHandleResponderTerminationRequest,
                  onResponderGrant: this.touchableHandleResponderGrant,
                  onResponderMove: this.touchableHandleResponderMove,
                  onResponderRelease: this.touchableHandleResponderRelease,
                  onResponderTerminate: this.touchableHandleResponderTerminate,
                  nativeID: this.props.nativeID,
                  testID: this.props.testID,
                  __source: {
                      fileName: "/Users/linyiting/Desktop/Arrow/arrow/node_modules/react-native/Libraries/Components/Touchable/TouchableHighlight.js",
                      lineNumber: 397
                  }
              }, c.cloneElement(t, {
                  style: b.compose(t.props.style, this.state.extraChildStyle)
              }), f.renderDebugView({
                  color: 'green',
                  hitSlop: this.props.hitSlop
              }))
          }
      });
  m.exports = H
}