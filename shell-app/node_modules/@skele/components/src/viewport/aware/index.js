module.exports = function(g, r, i, a, m, e, d) {
  'use strict';
  var t = r(d[0]),
      n = r(d[1]);
  Object.defineProperty(e, "__esModule", {
      value: !0
  }), e.default = void 0;
  var o = t(r(d[2])),
      p = t(r(d[3])),
      s = t(r(d[4])),
      f = t(r(d[5])),
      u = t(r(d[6])),
      l = t(r(d[7])),
      c = t(r(d[8])),
      w = r(d[9]),
      h = t(r(d[10])),
      v = n(r(d[11]));
  e.default = function(t) {
      var n, V;
      return V = n = (function(n) {
          function h(t, n) {
              var o;
              return (0, p.default)(this, h), (o = (0, f.default)(this, (0, u.default)(h).call(this, t, n)))._onViewportChange = function(t) {
                  if (o._lastInfo = t, o.nodeHandle)
                      if (t.shouldMeasureLayout || null == o.state.componentOffsetX || null == o.state.componentOffsetY || null == o.state.componentWidth || null == o.state.componentHeight) {
                          if (!o._isMounted) return;
                          w.UIManager.measureLayout(o.nodeHandle, t.parentHandle, function() {}, function(n, p, s, f) {
                              if (o._isMounted) {
                                  var u = v.isInViewport(t.viewportOffsetY, t.viewportHeight, p, f, o.props.preTriggerRatio),
                                      l = v.isInViewport(t.viewportOffsetX, t.viewportWidth, n, s, o.props.preTriggerRatio),
                                      c = u && l;
                                  o._checkViewportEnterOrLeave(c), o.setState({
                                      componentOffsetY: p,
                                      componentOffsetX: n,
                                      componentHeight: f,
                                      componentWidth: s,
                                      inViewport: c
                                  })
                              }
                          })
                      } else {
                          var n = v.isInViewport(t.viewportOffsetY, t.viewportHeight, o.state.componentOffsetY, o.state.componentHeight, o.props.preTriggerRatio),
                              p = v.isInViewport(t.viewportOffsetX, t.viewportWidth, o.state.componentOffsetX, o.state.componentWidth, o.props.preTriggerRatio),
                              s = n && p;
                          o._checkViewportEnterOrLeave(s) && o.setState({
                              inViewport: s
                          })
                      }
              }, o._checkViewportEnterOrLeave = function(t) {
                  return !o.state.inViewport && t ? (o.props.onViewportEnter && o.props.onViewportEnter(), !0) : !(!o.state.inViewport || t || (o.props.onViewportLeave && o.props.onViewportLeave(), 0))
              }, o.state = {
                  componentOffsetX: null,
                  componentOffsetY: null,
                  componentWidth: null,
                  componentHeight: null,
                  inViewport: !1
              }, o
          }
          return (0, l.default)(h, n), (0, s.default)(h, [{
              key: "componentDidMount",
              value: function() {
                  var t = this;
                  this.context.addViewportListener && this.context.addViewportListener(this._onViewportChange), this._isMounted = !0, this._lastInfo && setTimeout(function() {
                      return t._onViewportChange(t._lastInfo)
                  }, 50)
              }
          }, {
              key: "componentWillUnmount",
              value: function() {
                  this.context.removeViewportListener && this.context.removeViewportListener(this._onViewportChange), this._isMounted = !1
              }
          }, {
              key: "render",
              value: function() {
                  var n = this;
                  return c.default.createElement(t, (0, o.default)({}, this.props, {
                      inViewport: this.state.inViewport,
                      ref: function(t) {
                          n.nodeHandle = (0, w.findNodeHandle)(t), n.props.innerRef && n.props.innerRef(t)
                      },
                      __source: {
                          fileName: "/Users/linyiting/Desktop/Arrow/arrow/node_modules/@skele/components/src/viewport/aware/index.js",
                          lineNumber: 112
                      }
                  }))
              }
          }]), h
      })(c.default.Component), n.propTypes = {
          preTriggerRatio: h.default.number,
          onViewportEnter: h.default.func,
          onViewportLeave: h.default.func,
          innerRef: h.default.func
      }, n.contextTypes = {
          addViewportListener: h.default.func,
          removeViewportListener: h.default.func
      }, n.displayName = "ViewportAware(" + (t.displayName || t.name || 'Component') + ")", V
  }
}