module.exports = function(g, r, i, a, m, e, d) {
  var t = r(d[0]);
  Object.defineProperty(e, "__esModule", {
      value: !0
  }), e.default = e.makeOverlays = void 0;
  var o = t(r(d[1])),
      n = t(r(d[2])),
      u = t(r(d[3])),
      c = "/Users/linyiting/Desktop/Arrow/arrow/node_modules/react-native-maps/lib/components/Geojson.js";

  function l(t, o) {
      var n = Object.keys(t);
      if (Object.getOwnPropertySymbols) {
          var u = Object.getOwnPropertySymbols(t);
          o && (u = u.filter(function(o) {
              return Object.getOwnPropertyDescriptor(t, o).enumerable
          })), n.push.apply(n, u)
      }
      return n
  }

  function p(t) {
      for (var n = 1; n < arguments.length; n++) {
          var u = null != arguments[n] ? arguments[n] : {};
          n % 2 ? l(u, !0).forEach(function(n) {
              (0, o.default)(t, n, u[n])
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(u)) : l(u).forEach(function(o) {
              Object.defineProperty(t, o, Object.getOwnPropertyDescriptor(u, o))
          })
      }
      return t
  }
  var y = function(t) {
      var o = t.filter(function(t) {
              return t.geometry && ('Point' === t.geometry.type || 'MultiPoint' === t.geometry.type)
          }).map(function(t) {
              return v(t).map(function(o) {
                  return s(o, t)
              })
          }).reduce(f, []).map(function(t) {
              return p({}, t, {
                  type: 'point'
              })
          }),
          n = t.filter(function(t) {
              return t.geometry && ('LineString' === t.geometry.type || 'MultiLineString' === t.geometry.type)
          }).map(function(t) {
              return v(t).map(function(o) {
                  return s(o, t)
              })
          }).reduce(f, []).map(function(t) {
              return p({}, t, {
                  type: 'polyline'
              })
          }),
          u = t.filter(function(t) {
              return t.geometry && 'MultiPolygon' === t.geometry.type
          }).map(function(t) {
              return v(t).map(function(o) {
                  return s(o, t)
              })
          }).reduce(f, []),
          c = t.filter(function(t) {
              return t.geometry && 'Polygon' === t.geometry.type
          }).map(function(t) {
              return s(v(t), t)
          }).reduce(f, []).concat(u).map(function(t) {
              return p({}, t, {
                  type: 'polygon'
              })
          });
      return o.concat(n).concat(c)
  };
  e.makeOverlays = y;
  var f = function(t, o) {
          return t.concat(o)
      },
      s = function(t, o) {
          var n = {
              feature: o
          };
          return 'Polygon' === o.geometry.type || 'MultiPolygon' === o.geometry.type ? (n.coordinates = t[0], t.length > 1 && (n.holes = t.slice(1))) : n.coordinates = t, n
      },
      P = function(t) {
          return {
              latitude: t[1],
              longitude: t[0]
          }
      },
      b = function(t) {
          return t.map(P)
      },
      v = function(t) {
          var o = t.geometry;
          return 'Point' === o.type ? [P(o.coordinates)] : 'MultiPoint' === o.type ? o.coordinates.map(P) : 'LineString' === o.type ? [b(o.coordinates)] : 'MultiLineString' === o.type ? o.coordinates.map(b) : 'Polygon' === o.type ? o.coordinates.map(b) : 'MultiPolygon' === o.type ? o.coordinates.map(function(t) {
              return t.map(b)
          }) : []
      },
      O = function(t) {
          var o = y(t.geojson.features);
          return n.default.createElement(n.default.Fragment, {
              __source: {
                  fileName: c,
                  lineNumber: 99
              }
          }, o.map(function(o, l) {
              return 'point' === o.type ? n.default.createElement(u.default.Marker, {
                  key: l,
                  coordinate: o.coordinates,
                  pinColor: t.color,
                  __source: {
                      fileName: c,
                      lineNumber: 103
                  }
              }) : 'polygon' === o.type ? n.default.createElement(u.default.Polygon, {
                  key: l,
                  coordinates: o.coordinates,
                  holes: o.holes,
                  strokeColor: t.strokeColor,
                  fillColor: t.fillColor,
                  strokeWidth: t.strokeWidth,
                  __source: {
                      fileName: c,
                      lineNumber: 112
                  }
              }) : 'polyline' === o.type ? n.default.createElement(u.default.Polyline, {
                  key: l,
                  coordinates: o.coordinates,
                  strokeColor: t.strokeColor,
                  strokeWidth: t.strokeWidth,
                  __source: {
                      fileName: c,
                      lineNumber: 124
                  }
              }) : void 0
          }))
      };
  e.default = O
}