module.exports = function(g, r, i, a, m, e, d) {
  var t = r(d[0]),
      n = r(d[1]);
  Object.defineProperty(e, "__esModule", {
      value: !0
  }), e.default = void 0;
  var l = t(r(d[2])),
      o = t(r(d[3])),
      s = t(r(d[4])),
      u = t(r(d[5])),
      p = t(r(d[6])),
      y = t(r(d[7])),
      c = t(r(d[8])),
      f = t(r(d[9])),
      h = n(r(d[10])),
      O = n(r(d[11])),
      S = r(d[12]),
      b = t(r(d[13])),
      U = "/Users/linyiting/Desktop/Arrow/arrow/node_modules/react-native-gesture-handler/touchables/TouchableHighlight.js";

  function v(t, n) {
      var l = Object.keys(t);
      if (Object.getOwnPropertySymbols) {
          var o = Object.getOwnPropertySymbols(t);
          n && (o = o.filter(function(n) {
              return Object.getOwnPropertyDescriptor(t, n).enumerable
          })), l.push.apply(l, o)
      }
      return l
  }

  function P(t) {
      for (var n = 1; n < arguments.length; n++) {
          var o = null != arguments[n] ? arguments[n] : {};
          n % 2 ? v(o, !0).forEach(function(n) {
              (0, l.default)(t, n, o[n])
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(o)) : v(o).forEach(function(n) {
              Object.defineProperty(t, n, Object.getOwnPropertyDescriptor(o, n))
          })
      }
      return t
  }
  var C = (function(t) {
      function n(t) {
          var l;
          return (0, u.default)(this, n), (l = (0, y.default)(this, (0, c.default)(n).call(this, t))).showUnderlay = function() {
              l.hasPressHandler() && (l.setState({
                  extraChildStyle: {
                      opacity: l.props.activeOpacity
                  },
                  extraUnderlayStyle: {
                      backgroundColor: l.props.underlayColor
                  }
              }), l.props.onShowUnderlay && l.props.onShowUnderlay())
          }, l.hasPressHandler = function() {
              return l.props.onPress || l.props.onPressIn || l.props.onPressOut || l.props.onLongPress
          }, l.hideUnderlay = function() {
              l.setState({
                  extraChildStyle: null,
                  extraUnderlayStyle: null
              }), l.props.onHideUnderlay && l.props.onHideUnderlay()
          }, l.onStateChange = function(t, n) {
              n === O.TOUCHABLE_STATE.BEGAN ? l.showUnderlay() : n !== O.TOUCHABLE_STATE.UNDETERMINED && n !== O.TOUCHABLE_STATE.MOVED_OUTSIDE || l.hideUnderlay()
          }, l.state = {
              extraChildStyle: null,
              extraUnderlayStyle: null
          }, l
      }
      return (0, f.default)(n, t), (0, p.default)(n, [{
          key: "renderChildren",
          value: function() {
              if (!this.props.children) return h.default.createElement(S.View, {
                  __source: {
                      fileName: U,
                      lineNumber: 66
                  }
              });
              var t = h.default.Children.only(this.props.children);
              return h.default.cloneElement(t, {
                  style: S.StyleSheet.compose(t.props.style, this.state.extraChildStyle)
              })
          }
      }, {
          key: "render",
          value: function() {
              var t = this.props,
                  n = t.style,
                  l = void 0 === n ? {} : n,
                  u = (0, s.default)(t, ["style"]),
                  p = this.state.extraUnderlayStyle;
              return h.default.createElement(O.default, (0, o.default)({}, u, {
                  style: [l, p],
                  onStateChange: this.onStateChange,
                  __source: {
                      fileName: U,
                      lineNumber: 93
                  }
              }), this.renderChildren())
          }
      }]), n
  })(h.Component);
  e.default = C, C.defaultProps = P({}, O.default.defaultProps, {
      activeOpacity: .85,
      delayPressOut: 100,
      underlayColor: 'black'
  }), C.propTypes = P({}, O.default.publicPropTypes, {
      activeOpacity: b.default.number,
      underlayColor: b.default.string,
      style: b.default.any,
      onShowUnderlay: b.default.func,
      onHideUnderlay: b.default.func
  })
}