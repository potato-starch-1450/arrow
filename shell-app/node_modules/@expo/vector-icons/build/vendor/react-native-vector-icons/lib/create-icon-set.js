module.exports = function(g, r, i, a, m, e, d) {
  var t = r(d[0]),
      o = r(d[1]);
  Object.defineProperty(e, "__esModule", {
      value: !0
  }), e.default = function(t, o, S, T) {
      var A = S ? S.replace(/\.(otf|ttf)$/, '') : o,
          E = b.Platform.select({
              windows: "Assets/" + S + "#" + o,
              android: A,
              web: A,
              default: o
          }),
          R = h.default.oneOf(Object.keys(t)),
          L = (function(o) {
              function n() {
                  var t, o;
                  (0, f.default)(this, n);
                  for (var l = arguments.length, u = new Array(l), s = 0; s < l; s++) u[s] = arguments[s];
                  return (o = (0, c.default)(this, (t = (0, v.default)(n)).call.apply(t, [this].concat(u)))).root = null, o.handleRef = function(t) {
                      o.root = t
                  }, o
              }
              return (0, p.default)(n, o), (0, s.default)(n, [{
                  key: "setNativeProps",
                  value: function(t) {
                      this.root && this.root.setNativeProps(t)
                  }
              }, {
                  key: "render",
                  value: function() {
                      var o = this.props,
                          n = o.name,
                          f = o.size,
                          s = o.color,
                          c = o.style,
                          v = o.children,
                          p = (0, u.default)(o, ["name", "size", "color", "style", "children"]),
                          h = n ? t[n] || '?' : '';
                      'number' == typeof h && (h = String.fromCharCode(h));
                      var I = {
                              fontSize: f,
                              color: s
                          },
                          O = {
                              fontFamily: E,
                              fontWeight: 'normal',
                              fontStyle: 'normal'
                          };
                      return p.style = [I, c, O, T || {}], p.ref = this.handleRef, y.default.createElement(b.Text, (0, l.default)({}, p, {
                          __source: {
                              fileName: w,
                              lineNumber: 86
                          }
                      }), h, v)
                  }
              }]), n
          })(y.PureComponent);
      L.propTypes = {
          allowFontScaling: h.default.bool,
          name: R,
          size: h.default.number,
          color: h.default.oneOfType([h.default.string, h.default.number]),
          children: h.default.node,
          style: h.default.any
      }, L.defaultProps = {
          size: P,
          allowFontScaling: !1
      };
      var M = {};

      function U(o) {
          var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : P,
              l = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : C;
          (0, I.default)();
          var u = t[o] || '?';
          'number' == typeof u && (u = String.fromCharCode(u));
          var f = (0, b.processColor)(l),
              s = u + ":" + n + ":" + f,
              c = b.PixelRatio.get();
          return new Promise(function(t, o) {
              var l = M[s];
              void 0 !== l ? !l || l instanceof Error ? o(l) : t({
                  uri: l,
                  scale: c
              }) : F.getImageForFont(E, u, n, f, function(n, l) {
                  var u = 'string' == typeof n ? new Error(n) : n;
                  M[s] = l || u || !1, !u && l ? t({
                      uri: l,
                      scale: c
                  }) : o(u)
              })
          })
      }
      return L.Button = (0, O.default)(L), L.TabBarItem = (0, N.default)(R, U), L.TabBarItemIOS = L.TabBarItem, L.ToolbarAndroid = (0, _.default)(R, U), L.getImageSource = U, L.loadFont = function() {
          var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : S;
          return 'ios' === b.Platform.OS ? ((0, I.default)(), t ? F.loadFontWithFileName.apply(F, (0, n.default)(t.split('.'))) : Promise.reject(new Error('Unable to load font, because no file was specified. '))) : Promise.resolve()
      }, L.hasIcon = function(o) {
          return Object.prototype.hasOwnProperty.call(t, o)
      }, L.getRawGlyphMap = function() {
          return t
      }, L.getFontFamily = function() {
          return E
      }, L
  }, e.DEFAULT_ICON_COLOR = e.DEFAULT_ICON_SIZE = e.NativeIconAPI = void 0;
  var n = t(r(d[2])),
      l = t(r(d[3])),
      u = t(r(d[4])),
      f = t(r(d[5])),
      s = t(r(d[6])),
      c = t(r(d[7])),
      v = t(r(d[8])),
      p = t(r(d[9])),
      y = o(r(d[10])),
      h = t(r(d[11])),
      b = r(d[12]),
      I = t(r(d[13])),
      O = t(r(d[14])),
      N = t(r(d[15])),
      _ = t(r(d[16])),
      w = "/Users/linyiting/Desktop/Arrow/arrow/node_modules/@expo/vector-icons/build/vendor/react-native-vector-icons/lib/create-icon-set.js",
      F = b.NativeModules.RNVectorIconsManager || b.NativeModules.RNVectorIconsModule;
  e.NativeIconAPI = F;
  var P = 12;
  e.DEFAULT_ICON_SIZE = P;
  var C = 'black';
  e.DEFAULT_ICON_COLOR = C
}