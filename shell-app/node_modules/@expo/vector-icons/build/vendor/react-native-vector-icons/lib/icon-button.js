module.exports = function(g, r, i, a, m, e, d) {
  var t = r(d[0]),
      l = r(d[1]);
  Object.defineProperty(e, "__esModule", {
      value: !0
  }), e.default = function(t) {
      var l, w;
      return w = l = (function(l) {
          function P() {
              return (0, s.default)(this, P), (0, c.default)(this, (0, f.default)(P).apply(this, arguments))
          }
          return (0, y.default)(P, l), (0, u.default)(P, [{
              key: "render",
              value: function() {
                  var l = this.props,
                      s = l.style,
                      u = l.iconStyle,
                      c = l.children,
                      f = (0, n.default)(l, ["style", "iconStyle", "children"]),
                      y = (0, h.default)(f, O, 'style', 'name', 'size', 'color'),
                      P = (0, h.default)(f, T),
                      C = (0, p.default)(f, Object.keys(y), Object.keys(P), 'iconStyle', 'borderRadius', 'backgroundColor');
                  y.style = u ? [k.icon, u] : k.icon;
                  var w = (0, h.default)(this.props, 'color'),
                      x = (0, h.default)(this.props, 'backgroundColor', 'borderRadius');
                  return v.default.createElement(_.TouchableHighlight, (0, o.default)({
                      style: [k.touchable, x]
                  }, P, {
                      __source: {
                          fileName: S,
                          lineNumber: 118
                      }
                  }), v.default.createElement(_.View, (0, o.default)({
                      style: [k.container, x, s]
                  }, C, {
                      __source: {
                          fileName: S,
                          lineNumber: 122
                      }
                  }), v.default.createElement(t, (0, o.default)({}, y, {
                      __source: {
                          fileName: S,
                          lineNumber: 123
                      }
                  })), (0, b.default)(c) ? v.default.createElement(_.Text, {
                      style: [k.text, w],
                      __source: {
                          fileName: S,
                          lineNumber: 125
                      }
                  }, c) : c))
              }
          }]), P
      })(v.PureComponent), l.propTypes = {
          backgroundColor: P.default.oneOfType([P.default.string, P.default.number]),
          borderRadius: P.default.number,
          color: P.default.oneOfType([P.default.string, P.default.number]),
          size: P.default.number,
          iconStyle: P.default.any,
          style: P.default.any,
          children: P.default.node
      }, l.defaultProps = {
          backgroundColor: C,
          borderRadius: 5,
          color: 'white',
          size: 20
      }, w
  };
  var o = t(r(d[2])),
      n = t(r(d[3])),
      s = t(r(d[4])),
      u = t(r(d[5])),
      c = t(r(d[6])),
      f = t(r(d[7])),
      y = t(r(d[8])),
      b = t(r(d[9])),
      p = t(r(d[10])),
      h = t(r(d[11])),
      v = l(r(d[12])),
      P = t(r(d[13])),
      _ = r(d[14]),
      S = "/Users/linyiting/Desktop/Arrow/arrow/node_modules/@expo/vector-icons/build/vendor/react-native-vector-icons/lib/icon-button.js",
      k = _.StyleSheet.create({
          container: {
              flexDirection: 'row',
              justifyContent: 'flex-start',
              alignItems: 'center',
              padding: 8
          },
          touchable: {
              overflow: 'hidden'
          },
          icon: {
              marginRight: 10
          },
          text: {
              fontWeight: '600',
              backgroundColor: 'transparent'
          }
      }),
      C = '#007AFF',
      O = ['ellipsizeMode', 'numberOfLines', 'textBreakStrategy', 'selectable', 'suppressHighlighting', 'allowFontScaling', 'adjustsFontSizeToFit', 'minimumFontScale'],
      T = ['accessible', 'accessibilityLabel', 'accessibilityHint', 'accessibilityComponentType', 'accessibilityRole', 'accessibilityStates', 'accessibilityTraits', 'onFocus', 'onBlur', 'disabled', 'onPress', 'onPressIn', 'onPressOut', 'onLayout', 'onLongPress', 'nativeID', 'testID', 'delayPressIn', 'delayPressOut', 'delayLongPress', 'activeOpacity', 'underlayColor', 'selectionColor', 'onShowUnderlay', 'onHideUnderlay', 'hasTVPreferredFocus', 'tvParallaxProperties']
}