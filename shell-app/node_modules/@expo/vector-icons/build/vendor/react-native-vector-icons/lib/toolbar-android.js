module.exports = function(g, r, i, a, m, e, d) {
  var t = r(d[0]),
      o = r(d[1]);
  Object.defineProperty(e, "__esModule", {
      value: !0
  }), e.default = function(t, o) {
      var c, h;
      return h = c = (function(t) {
          function c() {
              var t, o;
              (0, s.default)(this, c);
              for (var n = arguments.length, u = new Array(n), l = 0; l < n; l++) u[l] = arguments[l];
              return (o = (0, f.default)(this, (t = (0, p.default)(c)).call.apply(t, [this].concat(u)))).state = {
                  logo: void 0,
                  navIcon: void 0,
                  overflowIcon: void 0,
                  actions: void 0
              }, o
          }
          return (0, v.default)(c, t), (0, l.default)(c, [{
              key: "componentDidMount",
              value: function() {
                  this.updateLogoIconSource(), this.updateNavIconSource(), this.updateOverflowIconSource(), this.updateActionIconSources()
              }
          }, {
              key: "componentDidUpdate",
              value: function(t) {
                  D(t, this.props) || this.updateLogoIconSource(), _(t, this.props) || this.updateNavIconSource(), A(t, this.props) || this.updateOverflowIconSource(), T(t, this.props) || this.updateActionIconSources()
              }
          }, {
              key: "updateLogoIconSource",
              value: function() {
                  var t, n, c, s, l, f;
                  return u.default.async(function(p) {
                      for (;;) switch (p.prev = p.next) {
                          case 0:
                              if (t = this.props, n = t.logoName, c = t.iconSize, s = t.iconColor, l = t.titleColor, !n) {
                                  p.next = 8;
                                  break
                              }
                              return p.next = 4, u.default.awrap(o(n, c, s || l));
                          case 4:
                              f = p.sent, this.setState({
                                  logo: f
                              }), p.next = 9;
                              break;
                          case 8:
                              this.state.logo && this.setState({
                                  logo: void 0
                              });
                          case 9:
                          case "end":
                              return p.stop()
                      }
                  }, null, this)
              }
          }, {
              key: "updateNavIconSource",
              value: function() {
                  var t, n, c, s, l, f;
                  return u.default.async(function(p) {
                      for (;;) switch (p.prev = p.next) {
                          case 0:
                              if (t = this.props, n = t.navIconName, c = t.iconSize, s = t.iconColor, l = t.titleColor, !n) {
                                  p.next = 8;
                                  break
                              }
                              return p.next = 4, u.default.awrap(o(n, c, s || l));
                          case 4:
                              f = p.sent, this.setState({
                                  navIcon: f
                              }), p.next = 9;
                              break;
                          case 8:
                              this.state.navIcon && this.setState({
                                  navIcon: void 0
                              });
                          case 9:
                          case "end":
                              return p.stop()
                      }
                  }, null, this)
              }
          }, {
              key: "updateOverflowIconSource",
              value: function() {
                  var t, n, c, s, l, f;
                  return u.default.async(function(p) {
                      for (;;) switch (p.prev = p.next) {
                          case 0:
                              if (t = this.props, n = t.overflowIconName, c = t.iconSize, s = t.iconColor, l = t.titleColor, !n) {
                                  p.next = 8;
                                  break
                              }
                              return p.next = 4, u.default.awrap(o(n, c, s || l));
                          case 4:
                              f = p.sent, this.setState({
                                  overflowIcon: f
                              }), p.next = 9;
                              break;
                          case 8:
                              this.state.overflowIcon && this.setState({
                                  overflowIcon: void 0
                              });
                          case 9:
                          case "end":
                              return p.stop()
                      }
                  }, null, this)
              }
          }, {
              key: "updateActionIconSources",
              value: function() {
                  var t, n, c, s, l, f;
                  return u.default.async(function(p) {
                      for (;;) switch (p.prev = p.next) {
                          case 0:
                              return t = this.props, n = t.actions, c = t.iconSize, s = t.iconColor, l = t.titleColor, p.next = 3, u.default.awrap(Promise.all((n || []).map(function(t) {
                                  return t.iconName ? o(t.iconName, t.iconSize || c, t.iconColor || s || l).then(function(o) {
                                      return N({}, t, {
                                          icon: o
                                      })
                                  }) : Promise.resolve(t)
                              })));
                          case 3:
                              f = p.sent, this.setState({
                                  actions: f
                              });
                          case 5:
                          case "end":
                              return p.stop()
                      }
                  }, null, this)
              }
          }, {
              key: "render",
              value: function() {
                  return b.default.createElement(S.ToolbarAndroid, (0, n.default)({}, this.props, this.state, {
                      __source: {
                          fileName: I,
                          lineNumber: 142
                      }
                  }))
              }
          }]), c
      })(b.PureComponent), c.propTypes = {
          logoName: t,
          navIconName: t,
          overflowIconName: t,
          actions: w.default.arrayOf(w.default.shape({
              title: w.default.string.isRequired,
              iconName: t,
              iconSize: w.default.number,
              iconColor: w.default.oneOfType([w.default.string, w.default.number]),
              show: w.default.oneOf(['always', 'ifRoom', 'never']),
              showWithText: w.default.bool
          })),
          iconSize: w.default.number,
          iconColor: w.default.oneOfType([w.default.string, w.default.number]),
          titleColor: w.default.oneOfType([w.default.string, w.default.number])
      }, c.defaultProps = {
          iconSize: 24
      }, h
  };
  var n = t(r(d[2])),
      c = t(r(d[3])),
      u = t(r(d[4])),
      s = t(r(d[5])),
      l = t(r(d[6])),
      f = t(r(d[7])),
      p = t(r(d[8])),
      v = t(r(d[9])),
      h = t(r(d[10])),
      y = t(r(d[11])),
      b = o(r(d[12])),
      w = t(r(d[13])),
      S = r(d[14]),
      I = "/Users/linyiting/Desktop/Arrow/arrow/node_modules/@expo/vector-icons/build/vendor/react-native-vector-icons/lib/toolbar-android.js";

  function O(t, o) {
      var n = Object.keys(t);
      if (Object.getOwnPropertySymbols) {
          var c = Object.getOwnPropertySymbols(t);
          o && (c = c.filter(function(o) {
              return Object.getOwnPropertyDescriptor(t, o).enumerable
          })), n.push.apply(n, c)
      }
      return n
  }

  function N(t) {
      for (var o = 1; o < arguments.length; o++) {
          var n = null != arguments[o] ? arguments[o] : {};
          o % 2 ? O(n, !0).forEach(function(o) {
              (0, c.default)(t, o, n[o])
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n)) : O(n).forEach(function(o) {
              Object.defineProperty(t, o, Object.getOwnPropertyDescriptor(n, o))
          })
      }
      return t
  }
  var x = ['iconSize', 'iconColor', 'titleColor'],
      k = [].concat(x, ['logoName']),
      C = [].concat(x, ['navIconName']),
      P = [].concat(x, ['overflowIconName']),
      j = [].concat(x, ['actions']),
      z = function(t) {
          return function(o, n) {
              return (0, h.default)((0, y.default)(o, t), (0, y.default)(n, t))
          }
      },
      D = z(k),
      _ = z(C),
      A = z(P),
      T = z(j)
}